File: .\next-env.d.ts
/// <reference types="next" />
/// <reference types="next/image-types/global" />

// NOTE: This file should not be edited
// see https://nextjs.org/docs/app/building-your-application/configuring/typescript for more information.

==================================================
File: .\tailwind.config.ts
import type { Config } from "tailwindcss"

const config = {
  darkMode: ["class"],
  content: [
    './pages/**/*.{ts,tsx}',
    './components/**/*.{ts,tsx}',
    './app/**/*.{ts,tsx}',
    './src/**/*.{ts,tsx}',
	],
  prefix: "",
  theme: {
    container: {
      center: true,
      padding: "2rem",
      screens: {
        "2xl": "1400px",
      },
    },
    extend: {
      colors: {
        border: "hsl(var(--border))",
        input: "hsl(var(--input))",
        ring: "hsl(var(--ring))",
        background: "hsl(var(--background))",
        foreground: "hsl(var(--foreground))",
        primary: {
          DEFAULT: "hsl(var(--primary))",
          foreground: "hsl(var(--primary-foreground))",
        },
        secondary: {
          DEFAULT: "hsl(var(--secondary))",
          foreground: "hsl(var(--secondary-foreground))",
        },
        destructive: {
          DEFAULT: "hsl(var(--destructive))",
          foreground: "hsl(var(--destructive-foreground))",
        },
        muted: {
          DEFAULT: "hsl(var(--muted))",
          foreground: "hsl(var(--muted-foreground))",
        },
        accent: {
          DEFAULT: "hsl(var(--accent))",
          foreground: "hsl(var(--accent-foreground))",
        },
        popover: {
          DEFAULT: "hsl(var(--popover))",
          foreground: "hsl(var(--popover-foreground))",
        },
        card: {
          DEFAULT: "hsl(var(--card))",
          foreground: "hsl(var(--card-foreground))",
        },
      },
      borderRadius: {
        lg: "var(--radius)",
        md: "calc(var(--radius) - 2px)",
        sm: "calc(var(--radius) - 4px)",
      },
      keyframes: {
        "accordion-down": {
          from: { height: "0" },
          to: { height: "var(--radix-accordion-content-height)" },
        },
        "accordion-up": {
          from: { height: "var(--radix-accordion-content-height)" },
          to: { height: "0" },
        },
      },
      animation: {
        "accordion-down": "accordion-down 0.2s ease-out",
        "accordion-up": "accordion-up 0.2s ease-out",
      },
    },
  },
  plugins: [require("tailwindcss-animate")],
} satisfies Config

export default config
==================================================
File: .\providers\ReactQueryProvider.tsx
"use client";

import { QueryClient, QueryClientProvider } from "@tanstack/react-query";
import { ReactQueryDevtools } from "@tanstack/react-query-devtools";
import { useState } from "react";

function ReactQueryProvider({ children }: React.PropsWithChildren) {
  const [client] = useState(new QueryClient());

  return (
    <QueryClientProvider client={client}>
      {children}
      <ReactQueryDevtools initialIsOpen={false} />
    </QueryClientProvider>
  );
}

export default ReactQueryProvider;

==================================================
File: .\src\middleware.ts
import { isAuthorized } from '@/config/globals';
import { NextResponse } from 'next/server';
import type { NextRequest } from 'next/server';

export function middleware(req: NextRequest) {
  const token = req.cookies.get('auth-token');

  console.log(token);

  if (!token) {
    return NextResponse.redirect(new URL('/auth', req.url));
  } 
  return NextResponse.next();
}

export const config = {
  matcher: ["/((?!api|auth|_next/static|_next/image|favicon.ico).*)"],
};
==================================================
File: .\src\app\layout.tsx

import type { Metadata } from "next";
import { Inter } from "next/font/google";
import "./globals.css";
import Navigation from "@/components/layout/my-navigation";
import Footer from "@/components/layout/my-footer";
import ReactQueryProvider from "../../providers/ReactQueryProvider";
import { Toaster } from "@/components/ui/sonner";

const inter = Inter({ subsets: ["latin"] });

export const metadata: Metadata = {
  title: "Kashtan",
  description: "Kashtan Data Base",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <body className={inter.className}>
        <ReactQueryProvider>
          {children}
          <Toaster />
        </ReactQueryProvider>
      </body>
    </html>
  );
}

==================================================
File: .\src\app\page.tsx


export default async function Home() {
  return (
    <main className="flex min-h-screen flex-col items-center">
    </main>
  );
}

==================================================
File: .\src\app\(root)\layout.tsx
import type { Metadata } from "next";
import { Inter } from "next/font/google";
import Navigation from "@/components/layout/my-navigation";
import Footer from "@/components/layout/my-footer";
import ReactQueryProvider from "../../../providers/ReactQueryProvider";
import { Toaster } from "@/components/ui/sonner";

const inter = Inter({ subsets: ["latin"] });

export const metadata: Metadata = {
  title: "Kashtan",
  description: "Kashtan Data Base",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <div>
      <Navigation />
      {children}
      <Footer />
    </div>
  );
}

==================================================
File: .\src\app\(root)\(references)\cities\page.tsx
"use client";

import TablePagination from "@/components/table-pagination";
import Search from "@/components/search";
import CityTable from "@/components/references/city-table";
import { useCities } from "@/hooks/use-cities";
import { useState } from "react";
import CityChart from "@/components/references/cities-stats";

export default function CitiesPage() {
  const [pageIndex, setPageIndex] = useState(0);
  const [searchQuery, setSearchQuery] = useState("");
  const { cities, total, isFirstPage, isLastPage } = useCities(
    pageIndex,
    searchQuery
  );

  return (
    <div className="flex min-h-screen flex-col items-center">
      <div className="w-90">
        <h1 className="text-5xl font-bold m-14 text-center">Города</h1>
        <CityChart/>
        <Search setSearchQuery={setSearchQuery} />
        <CityTable cities={cities} total={total} />
        <TablePagination
          pageIndex={pageIndex}
          setPageIndex={setPageIndex}
          isFirstPage={isFirstPage}
          isLastPage={isLastPage}
        />
      </div>
    </div>
  );
}

==================================================
File: .\src\app\(root)\(references)\payment_forms\page.tsx
"use client";

import TablePagination from "@/components/table-pagination";
import Search from "@/components/search";
import PaymentFormTable from "@/components/references/payment-form-table";
import { usePaymentForms } from "@/hooks/use-payment-forms";
import { useState } from "react";

export default function PaymentFormsPage() {
  const [pageIndex, setPageIndex] = useState(0);
  const [searchQuery, setSearchQuery] = useState("");
  const { paymentForms, total, isFirstPage, isLastPage } = usePaymentForms(
    pageIndex,
    searchQuery
  );

  return (
    <div className="flex min-h-screen flex-col items-center">
      <div className="w-90">
        <h1 className="text-5xl font-bold m-14 text-center">Формы платежа</h1>
        <Search setSearchQuery={setSearchQuery} />
        <PaymentFormTable paymentForms={paymentForms} total={total} />
        <TablePagination
          pageIndex={pageIndex}
          setPageIndex={setPageIndex}
          isFirstPage={isFirstPage}
          isLastPage={isLastPage}
        />
      </div>
    </div>
  );
}

==================================================
File: .\src\app\(root)\(references)\products\page.tsx
"use client";

import TablePagination from "@/components/table-pagination";
import Search from "@/components/search";
import ProductTable from "@/components/references/product-table";
import { useProducts } from "@/hooks/use-products";
import { useState } from "react";

export default function CitiesPage() {
  const [pageIndex, setPageIndex] = useState(0);
  const [searchQuery, setSearchQuery] = useState("");
  const { products, total, isFirstPage, isLastPage } = useProducts(
    pageIndex,
    searchQuery
  );

  return (
    <div className="flex min-h-screen flex-col items-center">
      <div className="w-90">
        <h1 className="text-5xl font-bold m-14 text-center">Продукция</h1>
        <Search setSearchQuery={setSearchQuery} />
        <ProductTable products={products} total={total} />
        <TablePagination
          pageIndex={pageIndex}
          setPageIndex={setPageIndex}
          isFirstPage={isFirstPage}
          isLastPage={isLastPage}
        />
      </div>
    </div>
  );
}

==================================================
File: .\src\app\(root)\(references)\property_types\page.tsx
"use client";

import TablePagination from "@/components/table-pagination";
import Search from "@/components/search";
import PropertyTypeTable from "@/components/references/property-type-table";
import { usePropertyTypes } from "@/hooks/use-property-types";
import { useState } from "react";

export default function PropertyTypesPage() {
  const [pageIndex, setPageIndex] = useState(0);
  const [searchQuery, setSearchQuery] = useState("");
  const { propertyTypes, total, isFirstPage, isLastPage } = usePropertyTypes(
    pageIndex,
    searchQuery
  );

  return (
    <div className="flex min-h-screen flex-col items-center">
      <div className="w-90">
        <h1 className="text-5xl font-bold m-14 text-center">Типы собственности</h1>
        <Search setSearchQuery={setSearchQuery} />
        <PropertyTypeTable propertyTypes={propertyTypes} total={total} />
        <TablePagination
          pageIndex={pageIndex}
          setPageIndex={setPageIndex}
          isFirstPage={isFirstPage}
          isLastPage={isLastPage}
        />
      </div>
    </div>
  );
}

==================================================
File: .\src\app\(root)\(tables)\agencies\page.tsx
"use client";

import TablePagination from "@/components/table-pagination";
import Search from "@/components/search";
import AgencyTable from "@/components/tables/agency-table";
import { useAgencies } from "@/hooks/use-agencies";
import { useState } from "react";
import AgenciesStats from "@/components/tables/agencies-stats";

export default function AgenciesPage() {
  const [pageIndex, setPageIndex] = useState(0);
  const [searchQuery, setSearchQuery] = useState("");
  const { agencies, total, isFirstPage, isLastPage } = useAgencies(
    pageIndex,
    searchQuery
  );

  return (
    <div className="flex min-h-screen flex-col items-center">
      <div className="w-90">
        <h1 className="text-5xl font-bold m-14 text-center">
          Рекламные агенства
        </h1>
        <AgenciesStats/>
        <Search setSearchQuery={setSearchQuery} />
        <AgencyTable agencies={agencies} total={total} />
        <TablePagination
          pageIndex={pageIndex}
          setPageIndex={setPageIndex}
          isFirstPage={isFirstPage}
          isLastPage={isLastPage}
        />
      </div>
    </div>
  );
}

==================================================
File: .\src\app\(root)\(tables)\agencies\[id]\page.tsx
"use client";

import { Separator } from "@/components/ui/separator";
import {
  Table,
  TableBody,
  TableCaption,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { useAgenciesById } from "@/hooks/use-agencies-by-id";
import { AgencyProduct } from "@/models/agency-product";
import { Order } from "@/models/order";

export default function AgencyPage({ params }: { params: { id: string } }) {
  const { agency } = useAgenciesById(params.id);
  
  return !agency ? (
    <div className="m-40">
      <p className="text-center">Загрузка...</p>
    </div>
  ) : (
    <div className="flex min-h-screen flex-col items-center">
      <div className="w-90">
        <h1 className="text-5xl font-bold m-14 text-center">{agency.name}</h1>
          <p className="text-center">{agency.city.name}, {agency.property.name} собственность, {agency.year}, {agency.paymentAccount}</p>
        <Separator className="m-10"/>
        <h1 className="text-2xl font-bold mb-10 text-start">Заказы агенства</h1>
        <Table>
          <TableCaption>Всего записей: {agency.orders.length}.</TableCaption>
          <TableHeader>
            <TableHead className="w-[350px]">ИД</TableHead>
            <TableHead className="w-[200px]">Клиент</TableHead>
            <TableHead className="w-[200px]">Продукт</TableHead>
            <TableHead>Количество</TableHead>
            <TableHead>Форма платежа</TableHead>
            <TableHead>Создан</TableHead>
            <TableHead>Завершен</TableHead>
            <TableHead>Действия</TableHead>
          </TableHeader>
          <TableBody>
            {agency.orders.map((order: Order) => (
              <TableRow key={order.id}>
                <TableCell className="text-sm">{order.id}</TableCell>
                <TableCell>{order.client.name}</TableCell>
                <TableCell>{order.agencyProduct.product.name}</TableCell>
                <TableCell>{order.amount}</TableCell>
                <TableCell>{order.paymentForm.name}</TableCell>
                <TableCell>{String(order.created)}</TableCell>
                <TableCell>{String(order.completed)}</TableCell>
                <TableCell></TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
        <Separator className="m-10"/>
        <h1 className="text-2xl font-bold mb-10 text-start">Продукция агенства</h1>
        <Table>
          <TableCaption>Всего записей: {agency.agencyProducts.length}.</TableCaption>
          <TableHeader>
            <TableHead className="w-[350px]">ИД</TableHead>
            <TableHead>Продукт</TableHead>
            <TableHead>Цена</TableHead>
            <TableHead>Действия</TableHead>
          </TableHeader>
          <TableBody>
            {agency.agencyProducts.map((agencyProduct: AgencyProduct) => (
              <TableRow key={agencyProduct.id}>
                <TableCell className="text-sm">{agencyProduct.id}</TableCell>
                <TableCell>{agencyProduct.product.name}</TableCell>
                <TableCell>{agencyProduct.price}</TableCell>
                <TableCell></TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
      </div>
    </div>
  );
}

==================================================
File: .\src\app\(root)\(tables)\agency_products\page.tsx
"use client";

import TablePagination from "@/components/table-pagination";
import Search from "@/components/search";
import AgencyProductsTable from "@/components/tables/agency-products-table";
import { useAgencyProducts } from "@/hooks/use-agency-products";
import { useState } from "react";

export default function AgenciesPage() {
  const [pageIndex, setPageIndex] = useState(0);
  const [searchQuery, setSearchQuery] = useState("");
  const { agencyProducts, total, isFirstPage, isLastPage } = useAgencyProducts(
    pageIndex,
    searchQuery
  );

  return (
    <div className="flex min-h-screen flex-col items-center">
      <div className="w-90">
        <h1 className="text-5xl font-bold m-14 text-center">
          Продукция рекламного агенства
        </h1>
        <Search setSearchQuery={setSearchQuery} />
        <AgencyProductsTable agencyProducts={agencyProducts} total={total} />
        <TablePagination
          pageIndex={pageIndex}
          setPageIndex={setPageIndex}
          isFirstPage={isFirstPage}
          isLastPage={isLastPage}
        />
      </div>
    </div>
  );
}

==================================================
File: .\src\app\(root)\(tables)\clients\page.tsx
"use client";

import TablePagination from "@/components/table-pagination";
import Search from "@/components/search";
import ClientTable from "@/components/tables/client-table";
import { useClients } from "@/hooks/use-clients";
import { useState } from "react";
import ClientsStats from "@/components/tables/client-stats";

export default function ClientsPage() {
  const [pageIndex, setPageIndex] = useState(0);
  const [searchQuery, setSearchQuery] = useState("");
  const { clients, total, isFirstPage, isLastPage } = useClients(
    pageIndex,
    searchQuery
  );

  return (
    <div className="flex min-h-screen flex-col items-center">
      <div className="w-90">
        <h1 className="text-5xl font-bold m-14 text-center">
          Клиенты рекламных агенств
        </h1>
        <ClientsStats />
        <Search setSearchQuery={setSearchQuery} />
        <ClientTable clients={clients} total={total} />
        <TablePagination
          pageIndex={pageIndex}
          setPageIndex={setPageIndex}
          isFirstPage={isFirstPage}
          isLastPage={isLastPage}
        />
      </div>
    </div>
  );
}

==================================================
File: .\src\app\(root)\(tables)\clients\[id]\page.tsx
"use client";

import {
  Table,
  TableBody,
  TableCaption,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { useClientsById } from "@/hooks/use-clients-by-id";
import { Order } from "@/models/order";

export default function ClientPage({ params }: { params: { id: string } }) {
  const { client } = useClientsById(params.id);
  return !client ? (
    <div className="m-40">
      <p className="text-center">Загрузка...</p>
    </div>
  ) : (
    <div className="flex min-h-screen flex-col items-center">
      <div className="w-90">
        <h1 className="text-5xl font-bold m-14 text-center">{client.name}</h1>
        <p>{client.city.name}</p>
        <Table>
          <TableCaption>Всего записей: {client.orders.length}.</TableCaption>
          <TableHeader>
            <TableHead className="w-[350px]">ИД</TableHead>
            <TableHead className="w-[200px]">Агенство</TableHead>
            <TableHead className="w-[200px]">Продукт</TableHead>
            <TableHead>Количество</TableHead>
            <TableHead>Форма платежа</TableHead>
            <TableHead>Создан</TableHead>
            <TableHead>Завершен</TableHead>
          </TableHeader>
          <TableBody>
            {client.orders.map((order: Order) => (
              <TableRow key={order.id}>
                <TableCell className="text-sm">{order.id}</TableCell>
                <TableCell>{order.agency.name}</TableCell>
                <TableCell>{order.agencyProduct.product.name}</TableCell>
                <TableCell>{order.amount}</TableCell>
                <TableCell>{order.paymentForm.name}</TableCell>
                <TableCell>{String(order.created)}</TableCell>
                <TableCell>{String(order.completed)}</TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
      </div>
    </div>
  );
}

==================================================
File: .\src\app\(root)\(tables)\orders\page.tsx
"use client";

import TablePagination from "@/components/table-pagination";
import Search from "@/components/search";
import OrderTable from "@/components/tables/order-table";
import { useOrders } from "@/hooks/use-orders";
import { useState } from "react";
import OrderChart from "@/components/tables/orders-stats";

export default function OrdersPage() {
  const [pageIndex, setPageIndex] = useState(0);
  const [searchQuery, setSearchQuery] = useState("");
  const { orders, total, isFirstPage, isLastPage } = useOrders(
    pageIndex,
    searchQuery
  );

  return (
    <div className="flex min-h-screen flex-col items-center">
      <div className="w-90">
        <h1 className="text-5xl font-bold m-14 text-center">
          Общий список заказов
        </h1>
        <OrderChart/>
        <Search setSearchQuery={setSearchQuery} />
        <OrderTable orders={orders} total={total} />
        <TablePagination
          pageIndex={pageIndex}
          setPageIndex={setPageIndex}
          isFirstPage={isFirstPage}
          isLastPage={isLastPage}
        />
      </div>
    </div>
  );
}

==================================================
File: .\src\app\(root)\(tables)\users\page.tsx
"use client";

import TablePagination from "@/components/table-pagination";
import Search from "@/components/search";
import UserTable from "@/components/tables/user-table";
import { useUsers } from "@/hooks/use-users";
import { useState } from "react";

export default function UsersPage() {
  const [pageIndex, setPageIndex] = useState(0);
  const [searchQuery, setSearchQuery] = useState("");
  const { users, total, isFirstPage, isLastPage } = useUsers(
    pageIndex,
    searchQuery
  );

  return (
    <div className="flex min-h-screen flex-col items-center">
      <div className="w-90">
        <h1 className="text-5xl font-bold m-14 text-center">
          Общий список заказов
        </h1>
        <Search setSearchQuery={setSearchQuery} />
        <UserTable users={users} total={total} />
        <TablePagination
          pageIndex={pageIndex}
          setPageIndex={setPageIndex}
          isFirstPage={isFirstPage}
          isLastPage={isLastPage}
        />
      </div>
    </div>
  );
}

==================================================
File: .\src\app\(root)\queries\page.tsx
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table"
import { db } from "@/config/globals";
import { PrismaClient } from "@prisma/client";
import { queryA, QueryA } from "./queries";

/* 
// @ts-ignore */

export default async function QueriesPage() {
  

    
  const ordersA = await queryA();
  console.log(ordersA);
  

  // const ordersB = queryB();

  

  // const agenciesClientsC = queryC();

  

  // const agenciesD = queryD();

  

  // const agenciesE = queryE();

  

  // const clientsF = queryF();

  

  // const orderAmountG = queryG();

  

  // const clientsH = queryH();

  

  // const agenciesI = queryI();

  

  // const clientsAgenciesJ = queryJ();

  

  // const agenciesK = queryK();

  

  // const productsL = queryL();

  

  // const agenciesM = queryM();



  // const clientsN = queryN();

  

  // const agenciesO = queryO();

  

  // const agenciesP = queryP();

  

  // const agenciesQ = queryQ();

  

  // const ordersR = queryR();

  

  // const agenciesS = queryS();

  

  // const clientsT = queryT();

  

  // const agenciesU = queryU();

  return (
    <div className="flex min-h-screen flex-col items-center">
      <div className="w-90 space-y-14">
        <div>
          <h1 className="text-3xl font-bold m-14 text-center">
            Симметричное внутреннее соединение с условием отбора по датам
          </h1>
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead className="w-[100px]">Создан</TableHead>
                <TableHead>Клиент</TableHead>
                <TableHead>Агенство</TableHead>
                <TableHead className="text-right">Продукт</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {/* <TableRow>
                <TableCell className="font-medium">INV001</TableCell>
                <TableCell>Paid</TableCell>
                <TableCell>Credit Card</TableCell>
                <TableCell className="text-right">$250.00</TableCell>
              </TableRow> */}
              {ordersA.map((order: QueryA) => (<TableRow>
                <TableCell className="font-medium">{order.agencyname}</TableCell>
                <TableCell>{order.clientname}</TableCell>
                <TableCell>{order.productname}</TableCell>
                <TableCell className="text-right">{String(order.created)}</TableCell>
              </TableRow>))}
            </TableBody>
          </Table>
        </div>
      </div>
    </div>
  );
}

==================================================
File: .\src\app\(root)\queries\queries.ts
import { db } from "@/config/globals";
import { PrismaClient } from "@prisma/client";
import { cookies } from "next/headers";

export type QueryA = {
  created: string;
  clientname: string;
  agencyname: string;
  productname: string;
};

type QueryB = {
  id: string;
  amount: number;
  created: string;
  completed: string;
  clientname: string;
  agencyname: string;
};

type QueryC = {
  clientname: string;
  agencyname: string;
};

type QueryD = {
  agencyname: string;
  orderamount: number;
};

type QueryE = {
  agencyname: string;
  totalamount: number;
};

type QueryF = {
  clientname: string;
  orderamount: number;
  agencyname: string;
};

type QueryG = {
  totalamount: number;
};

type QueryH = {
  clientName: string;
  totalAmount: number;
};

type QueryI = {
  agencyName: string;
  totalAmount: number;
};

type QueryJ = {
  clientName: string;
  agencyName: string;
  productName: string;
  amount: number;
};

type QueryK = {
  agencyName: string;
  price: number;
};

type QueryL = {
  productName: string;
  agencyPrice: number;
};

type QueryM = {
  agencyName: string;
  totalProducts: number;
};

type QueryN = {
  clientName: string;
  totalOrders: number;
};

type QueryO = {
  agencyName: string;
  productName: string;
  price: number;
};

type QueryP = {
  agencyName: string;
  productName: string;
  orderAmount: number;
};

type QueryQ = {
  agencyName: string;
  productName: string;
  orderAmount: number;
};

type QueryR = {
  totalAmount: number;
};

type QueryS = {
  agencyName: string;
  totalOrders: number;
};

type QueryT = {
  clientName: string;
  agencyName: string;
  orderAmount: number;
};

type QueryU = {
  clientName: string;
  agencyName: string;
  orderAmount: number;
};

const cookieStore = cookies();
const authToken = cookieStore.get("auth-token");
const prisma = new PrismaClient({
  datasourceUrl: authToken?.value,
});

// Симметричное внутреннее соединение с условием отбора по датам
export const queryA = async () => {
  const data = await prisma.$queryRaw<QueryA[]>`
  SELECT o.created AS created, c.name AS clientName, a.name AS agencyName, p.name AS productName
  FROM orders o
  INNER JOIN clients c ON o.client_id = c.id
  INNER JOIN agencies a ON o.agency_id = a.id
  INNER JOIN agency_poducts ap ON o.agency_product_id = ap.id
  INNER JOIN products p ON ap.product_id = p.id
  WHERE o.created BETWEEN '1970-01-01' AND '1970-01-01';
  `;

  // console.log(data);
  return data;
};

// Симметричное внутреннее соединение с условием отбора по датам
const queryB = async () => {
  const data = await prisma.$queryRaw<QueryB[]>`
  SELECT o.id, o.amount, o.created, o.completed, c.name AS clientName, a.name AS agencyName
    FROM orders o
    INNER JOIN clients c ON o.client_id = c.id
    INNER JOIN agencies a ON o.agency_id = a.id
    WHERE o.completed BETWEEN '1960-01-01' AND '2023-12-31';`;

  // console.log(data);
  return data;
};

// Симметричное внутреннее соединение без условия
const queryC = async () => {
  const data = await prisma.$queryRaw<QueryC[]>`
  SELECT clients.name AS clientName, agencies.name AS agencyName 
    FROM clients 
    INNER JOIN orders ON clients.id = orders.client_id 
    INNER JOIN agencies ON orders.agency_id = agencies.id;`;

  // console.log(data);
  return data;
};

// Итоговый запрос с условием на группы
const queryD = async () => {
  const data = await prisma.$queryRaw<
    QueryD[]
  >`SELECT a.name AS agencyName, SUM(o.amount)::int AS orderAmount 
    FROM orders o 
    INNER JOIN agencies a ON o.agency_id = a.id 
    GROUP BY a.name HAVING SUM(o.amount)::int > 1000;`;

  //console.log(data);
  return data;
};

// Итоговый запрос без условия
const queryE = async () => {
  const data = await prisma.$queryRaw<QueryE[]>`
  SELECT a.name AS agencyName, SUM(o.amount)::int AS totalAmount 
  FROM orders o 
  INNER JOIN agencies a ON o.agency_id = a.id 
  GROUP BY a.name;`;

  //console.log(data);
  return data;
};

// Симметричное внутреннее соединение без условия
const queryF = async () => {
  const data = await prisma.$queryRaw<QueryF[]>`
  SELECT c.name AS clientName, o.amount AS orderAmount, a.name AS agencyName 
  FROM clients c 
  INNER JOIN orders o ON c.id = o.client_id 
  INNER JOIN agencies a ON o.agency_id = a.id;
  `;

  //console.log(data);
  return data;
};

// Итоговый запрос без условия с итоговыми данными вида «всего»
const queryG = async () => {
  const data = await prisma.$queryRaw<QueryG[]>`
  SELECT SUM(o.amount)::int AS totalAmount FROM orders o;
  `;

  // console.log(data);
  return data;
};

// Итоговый запрос без условия с итоговыми данными вида «в том числе»
const queryH = async () => {
  const data = await prisma.$queryRaw<QueryH[]>`
  SELECT c.name AS clientName, SUM(o.amount)::int AS totalAmount
  FROM orders o 
  JOIN clients c ON o.client_id = c.id 
  GROUP BY c.name;
  `;

  // console.log(data);
  return data;
};

// Итоговый запрос с условием на данные по значению
const queryI = async () => {
  const data = await prisma.$queryRaw<QueryI[]>`
  SELECT a.name AS agencyName, SUM(o.amount)::int AS totalAmount
  FROM orders o
  JOIN agencies a ON o.agency_id = a.id
  WHERE a.name = 'Вектор Рекламы'
  GROUP BY a.name;
  `;

  // console.log(data);
  return data;
};

// Cимметричное внутреннее соединение с условием отбора по внешнему ключу
const queryJ = async () => {
  const data = await prisma.$queryRaw<QueryJ[]>`
  SELECT c.name AS clientName, a.name AS agencyName, p.name AS productName, o.amount AS amount
  FROM orders o
  INNER JOIN clients c ON o.client_id = c.id
  INNER JOIN agencies a ON o.agency_id = a.id
  INNER JOIN agency_poducts ap ON o.agency_product_id = ap.id
  INNER JOIN products p ON ap.product_id = p.id
  WHERE a.id = '7299d30e-2f61-45af-bfec-3b9677958ba3';
  `;

  // console.log(data);
  return data;
};

// Левое внешнее соединение
const queryK = async () => {
  const data = await prisma.$queryRaw<QueryK[]>`
    SELECT a.name as agencyName, ap.price AS price
    FROM agencies a
    LEFT JOIN agency_poducts ap ON a.id = ap.agency_id;
    `;

  // console.log(data);
  return data;
};

// Правое внешнее соединение
const queryL = async () => {
  const data = await prisma.$queryRaw<QueryL[]>`
  SELECT p.name AS productName, ap.price AS agencyPrice 
  FROM products p 
  RIGHT JOIN agency_poducts ap ON p.id = ap.product_id;
  `;

  // console.log(data);
  return data;
};

// Итоговые запросы с условием на данные с использованием индекса
const queryM = async () => {
  const data = await prisma.$queryRaw<QueryM[]>`
  SELECT a.name AS agencyName, COUNT(ap.product_id)::int AS totalProducts
  FROM agencies a
  LEFT JOIN agency_poducts ap ON a.id = ap.agency_id
  WHERE ap.price > 50
  GROUP BY a.name;
  `;

  // console.log(data);
  return data;
};

// Итоговые запросы с условием на данные по маске
const queryN = async () => {
  const data = await prisma.$queryRaw<QueryN[]>`
    SELECT c.name AS clientName, COUNT(o.id)::int AS totalOrders
    FROM clients c
    LEFT JOIN orders o ON c.id = o.client_id
    WHERE c.name LIKE 'О%'
    GROUP BY c.name;
    `;

  // console.log(data);
  return data;
};

// Запрос на запросе по принципу левого соединения
const queryO = async () => {
  const data = await prisma.$queryRaw<QueryO[]>`
  SELECT a.name AS agencyName, p.name AS productName, ap.price AS price 
  FROM agencies a
  LEFT JOIN agency_poducts ap ON a.id = ap.agency_id
  LEFT JOIN products p ON ap.product_id = p.id
  WHERE ap.price > 100
  ORDER BY ap.price;
  `;

  // console.log(data);
  return data;
};

// Симметричное внутреннее соединение с условием отбора по внешнему ключу
const queryP = async () => {
  const data = await prisma.$queryRaw<QueryP[]>`
  SELECT 
    a.name AS agencyName, 
    p.name AS productName, 
    o.amount AS orderAmount 
  FROM agencies a
  INNER JOIN agency_poducts ap ON a.id = ap.agency_id
  INNER JOIN products p ON ap.product_id = p.id
  INNER JOIN orders o ON ap.id = o.agency_product_id
  WHERE a.city_id = '2920a37f-cc45-4285-9e8a-2c89a831a800';
  `;

  // console.log(data);
  return data;
};

// Симметричное внутреннее соединение без условия
const queryQ = async () => {
  const data = await prisma.$queryRaw<QueryQ[]>`
  SELECT 
    a.name AS agency_name, 
    p.name AS product_name, 
    o.amount AS order_amount 
  FROM agencies a
  INNER JOIN agency_poducts ap ON a.id = ap.agency_id
  INNER JOIN products p ON ap.product_id = p.id
  INNER JOIN orders o ON ap.id = o.agency_product_id;
  `;

  // console.log(data);
  return data;
};

// Итоговые запросы с условием на данные без использования индекса
const queryR = async () => {
  const data = await prisma.$queryRaw<QueryR[]>`
  SELECT SUM(o.amount)::int AS totalAmount 
  FROM orders o
  WHERE o.created <= '1970-01-01' 
  AND o.completed IS NOT NULL;
  `;

  //console.log(data);
  return data;
};

// Итоговый запрос с условием на данные и на группы
const queryS = async () => {
  const data = await prisma.$queryRaw<QueryS[]>`
  SELECT agency.name AS agencyName, COUNT(o.id)::int AS totalOrders
  FROM orders AS o
  JOIN agencies AS agency ON o.agency_id = agency.id
  WHERE o.created >= '1970-01-01'
  GROUP BY agency.name;
  `;

  // console.log(data);
  return data;
};

// Запрос с использованием объединения
const queryT = async () => {
  const data = await prisma.$queryRaw<QueryT[]>`
  SELECT client.name AS clientName, o.amount AS orderAmount, agency.name AS agencyName 
  FROM clients AS client
  JOIN orders AS o ON client.id = o.client_id
  JOIN agencies AS agency ON o.agency_id = agency.id;
  `;

  // console.log(data);
  return data;
};

// Запросы с подзапросами с использованием in
const queryU = async () => {
  const data = await prisma.$queryRaw<QueryU[]>`
    SELECT c.name AS clientName, a.name AS agencyName, o.amount AS orderAmount 
  FROM orders o
  INNER JOIN clients c ON o.client_id = c.id
  INNER JOIN agencies a ON o.agency_id = a.id
  WHERE a.city_id IN (SELECT id FROM cities WHERE name = 'Пинск');
  `;

  // console.log(data);
  return data;
};
==================================================
File: .\src\app\api\agencies\route.ts
import { db } from "@/config/globals";
import { PrismaClient } from "@prisma/client";
import { NextRequest } from "next/server";
import { cookies } from "next/headers";


export async function GET(req: NextRequest) {
  const url = new URL(req.url);
  const pageIndex = Number(url.searchParams.get("index"));
  const take = 20;
  const skip = pageIndex * take;

    const cookieStore = cookies();
  const authToken = cookieStore.get("auth-token");
  ;
  const prisma = new PrismaClient({
    datasourceUrl: authToken?.value,
  });
  try {
    const data = await prisma.agency.findMany({
      skip: skip,
      take: take,
      orderBy: { id: "desc" },
      include: {
        city: true,
        orders: true,
        property: true,
        agencyProducts: true,
      },
      where: {
        name: {
          contains: url.searchParams.get("name") || "",
        },
      },
    });
    const count = await prisma.agency.count();
    return new Response(JSON.stringify({ agencies: data, total: count }), {
      status: 200,
    });
  } catch (error) {
    console.log(error);
    return new Response(JSON.stringify({ error: "Error: " + error }), {
      status: 500,
    });
  }
}

export async function POST(req: NextRequest) {
  const body = await req.json();
    const cookieStore = cookies();
  const authToken = cookieStore.get("auth-token");
  ;
  const prisma = new PrismaClient({
    datasourceUrl: authToken?.value,
  });
  try {
    const { name, cityId, propertyTypeId, year, paymentAccount} = body;
    const data = await prisma.agency.create({
      data: {
        name,
        cityId,
        propertyTypeId,
        year,
        paymentAccount,
      },
    });
    return new Response(JSON.stringify({ agency: data }), { status: 201 });
  } catch (error) {
    console.log(error);
    return new Response(JSON.stringify({ error: "Error: " + error }), {
      status: 500,
    });
  }
}

==================================================
File: .\src\app\api\agencies\query\route.ts
import { db } from "@/config/globals";
import { PrismaClient } from "@prisma/client";
import { cookies } from "next/headers";
import { NextRequest } from "next/server";

type AmountStat = {
  name: string;
  amount: number;
}

export async function GET(req: NextRequest) {

    const cookieStore = cookies();
  const authToken = cookieStore.get("auth-token");
  ;
  const prisma = new PrismaClient({
    datasourceUrl: authToken?.value,
  });
  try {
    const data =
    await prisma.$queryRaw<AmountStat[]>`SELECT a.name AS name, COUNT(o.id)::int AS amount
    FROM agencies a
    JOIN orders o ON o.agency_id = a.id
    GROUP BY a.name
    HAVING COUNT(o.id) > (
        SELECT AVG(total_orders)
        FROM (
            SELECT COUNT(o.id) AS total_orders
            FROM agencies a
            JOIN orders o ON o.agency_id = a.id
            GROUP BY a.name
        ) AS avg_orders
    );`;

    return new Response(JSON.stringify({ result: data }), { status: 200 });
  } catch (error) {
    console.error(error);
    return new Response(JSON.stringify({ error: "Error: " + error }), {
      status: 500,
    });
  }
}

==================================================
File: .\src\app\api\agencies\[id]\route.ts
import { PrismaClient } from "@prisma/client";
import { cookies } from "next/headers";
import { NextRequest } from "next/server";


export async function GET(
  req: NextRequest,
  { params }: { params: { id: string } }
) {
  const { id } = params;

    const cookieStore = cookies();
  const authToken = cookieStore.get("auth-token");
  ;
  const prisma = new PrismaClient({
    datasourceUrl: authToken?.value,
  });
  try {
    const data = await prisma.agency.findUnique({
      where: {
        id: id,
      },
      include: {
        city: true,
        property: true,
        agencyProducts: {
          include: {
            product: true,
          },
        },
        orders: {
          include: {
            agencyProduct: {
              include: {
                product: true,
              },
            },
            client: true,
            paymentForm: true,
          },
        },
      },
    });
    return new Response(JSON.stringify({ agency: data }), { status: 200 });
  } catch (error) {
    console.error(error);
    return new Response(JSON.stringify({ error: "Error: " + error }), {
      status: 500,
    });
  }
}

export async function DELETE(
  req: NextRequest,
  { params }: { params: { id: string } }
) {
  const { id } = params;

    const cookieStore = cookies();
  const authToken = cookieStore.get("auth-token");
  ;
  const prisma = new PrismaClient({
    datasourceUrl: authToken?.value,
  });
  try {
    await prisma.agency.delete({ where: { id: id } });
    prisma.agency.update;
    return new Response(JSON.stringify({ id: id }), { status: 200 });
  } catch (error) {
    return new Response(JSON.stringify({ error: "Error: " + error }), {
      status: 500,
    });
  }
}

export async function PUT(
  req: NextRequest,
  { params }: { params: { id: string } }
) {
  const body = await req.json();

    const cookieStore = cookies();
  const authToken = cookieStore.get("auth-token");
  ;
  const prisma = new PrismaClient({
    datasourceUrl: authToken?.value,
  });
  try {
    const { name, cityId, propertyTypeId, year, paymentAccount } = body;
    const { id } = params;
    await prisma.agency.update({
      where: { id: id },
      data: {
        name,
        cityId,
        propertyTypeId,
        year,
        paymentAccount,
      },
    });
    return new Response(JSON.stringify({ name: name }), { status: 200 });
  } catch (error) {
    return new Response(JSON.stringify({ error: "Error: " + error }), {
      status: 500,
    });
  }
}

==================================================
File: .\src\app\api\agency-products\route.ts
import { db } from "@/config/globals";
import { PrismaClient } from "@prisma/client";
import { NextRequest } from "next/server";
import { cookies } from "next/headers";


export async function GET(req: NextRequest) {
  const url = new URL(req.url);
  const pageIndex = Number(url.searchParams.get("index"));
  const take = 20;
  const skip = pageIndex * take;

    const cookieStore = cookies();
  const authToken = cookieStore.get("auth-token");
  ;
  const prisma = new PrismaClient({
    datasourceUrl: authToken?.value,
  });
  try {
    const data = await prisma.agencyProduct.findMany({
      skip: skip,
      take: take,
      orderBy: { id: "desc" },
      include: {
        product: true,
        agency: true,
      },
      where: {
        product: {
          name: {
            contains: url.searchParams.get("name") || "",
          },
        },
      },
    });
    const count = await prisma.agencyProduct.count();
    return new Response(
      JSON.stringify({ agencyProducts: data, total: count }),
      {
        status: 200,
      }
    );
  } catch (error) {
    console.log(error);
    return new Response(JSON.stringify({ error: "Error: " + error }), {
      status: 500,
    });
  }
}

export async function POST(req: NextRequest) {
  const body = await req.json();
    const cookieStore = cookies();
  const authToken = cookieStore.get("auth-token");
  ;
  const prisma = new PrismaClient({
    datasourceUrl: authToken?.value,
  });
  try {
    const { agencyId, productId, price } = body;
    const data = await prisma.agencyProduct.create({
      data: {
        agencyId,
        productId,
        price,
      },
    });
    return new Response(JSON.stringify({ agencyProduct: data }), {
      status: 201,
    });
  } catch (error) {
    return new Response(JSON.stringify({ error: "Error: " + error }), {
      status: 500,
    });
  }
}

==================================================
File: .\src\app\api\agency-products\[id]\route.ts
import { db } from "@/config/globals";
import { PrismaClient } from "@prisma/client";
import { NextRequest } from "next/server";
import { cookies } from "next/headers";


export async function DELETE(
  req: NextRequest,
  { params }: { params: { id: string } }
) {
  const { id } = params;

    const cookieStore = cookies();
  const authToken = cookieStore.get("auth-token");
  ;
  const prisma = new PrismaClient({
    datasourceUrl: authToken?.value,
  });
  try {
    await prisma.agencyProduct.delete({ where: { id: id } });
    prisma.agencyProduct.update;
    return new Response(JSON.stringify({ id: id }), { status: 200 });
  } catch (error) {
    return new Response(JSON.stringify({ error: "Error: " + error }), {
      status: 500,
    });
  }
}

export async function PUT(
  req: NextRequest,
  { params }: { params: { id: string } }
) {
  const body = await req.json();

    const cookieStore = cookies();
  const authToken = cookieStore.get("auth-token");
  ;
  const prisma = new PrismaClient({
    datasourceUrl: authToken?.value,
  });
  try {
    const { agencyId, productId, price } = body;
    const { id } = params;
    await prisma.agencyProduct.update({
      where: { id: id },
      data: { agencyId: agencyId, productId: productId, price: price },
    });
    return new Response(JSON.stringify({ id: id }), { status: 200 });
  } catch (error) {
    return new Response(JSON.stringify({ error: "Error: " + error }), {
      status: 500,
    });
  }
}

==================================================
File: .\src\app\api\auth\route.ts
import { db, isAuthorized, setIsAuthorized } from "@/config/globals";
import { PrismaClient } from "@prisma/client";
import { cookies } from "next/headers";
import { NextRequest, NextResponse } from "next/server";

export async function POST(req: NextRequest) {
  const body = await req.json();

  try {
    const { login, password } = body;

    const prisma = new PrismaClient({
      datasourceUrl: `postgresql://${login}:${password}@localhost:${db.port}/${db.name}?schema=public`,
    });

    const user = await prisma.user.findFirst({
      where: {
        login: login,
      },
      select: {
        login: true,
        role: true,
      },
    });

    const token = `postgresql://${login}:${password}@localhost:${db.port}/${db.name}?schema=public`;
    cookies().set("auth-token", token);

    return new Response(JSON.stringify({ token: token, user: user }));
  } catch (error) {
    console.log(error);
    return new Response(JSON.stringify({ error: "Error: " + error }), {
      status: 500,
    });
  }
}

==================================================
File: .\src\app\api\cities\route.ts
import { db } from "@/config/globals";
import { PrismaClient } from "@prisma/client";
import { cookies } from "next/headers";
import { NextRequest } from "next/server";

export async function GET(req: NextRequest) {
  const url = new URL(req.url);
  const pageIndex = url.searchParams.get("index");
  const take = 20;
  const skip = pageIndex ? Number(pageIndex) * take : undefined;

  const cookieStore = cookies();
  const authToken = cookieStore.get("auth-token");
  ;
  const prisma = new PrismaClient({
    datasourceUrl: authToken?.value,
  });
  try {
    const data = await prisma.city.findMany({
      skip: skip,
      take: pageIndex ? take : undefined,
      orderBy: { id: "desc" },
      where: {
        name: {
          contains: url.searchParams.get("name") || "",
        },
      },
    });
    const count = await prisma.city.count();
    return new Response(JSON.stringify({ cities: data, total: count }), {
      status: 200,
    });
  } catch (error) {
    console.log(error);
    return new Response(JSON.stringify({ error: "Error: " + error }), {
      status: 500,
    });
  }
}

export async function POST(req: NextRequest) {
  const body = await req.json();
    const cookieStore = cookies();
  const authToken = cookieStore.get("auth-token");
  ;
  const prisma = new PrismaClient({
    datasourceUrl: authToken?.value,
  });
  try {
    const { name } = body;
    const city = await prisma.city.create({
      data: {
        name,
      },
    });
    return new Response(JSON.stringify({ city }), { status: 201 });
  } catch (error) {
    return new Response(JSON.stringify({ error: "Error: " + error }), {
      status: 500,
    });
  }
}

==================================================
File: .\src\app\api\cities\query\route.ts
import { db } from "@/config/globals";
import { PrismaClient } from "@prisma/client";
import { NextRequest } from "next/server";
import { cookies } from "next/headers";


type AmountStat = {
  name: string;
  amount: number;
}

export async function GET(req: NextRequest) {
  const url = new URL(req.url);
  const amount = Number(url.searchParams.get("amount"));

    const cookieStore = cookies();
  const authToken = cookieStore.get("auth-token");
  ;
  const prisma = new PrismaClient({
    datasourceUrl: authToken?.value,
  });
  try {
    const data =
    await prisma.$queryRaw<AmountStat[]>`SELECT c.name AS name, COUNT(*)::int AS amount
    FROM orders o
    JOIN agencies a ON o.agency_id = a.id
    JOIN cities c ON a.city_id = c.id
    GROUP BY c.name
    HAVING COUNT(*) > ${amount};`;

    return new Response(JSON.stringify({ result: data }), { status: 200 });
  } catch (error) {
    console.error(error);
    return new Response(JSON.stringify({ error: "Error: " + error }), {
      status: 500,
    });
  }
}

==================================================
File: .\src\app\api\cities\[id]\route.ts
import { db } from "@/config/globals";
import { PrismaClient } from "@prisma/client";
import { NextRequest } from "next/server";
import { cookies } from "next/headers";


export async function DELETE(
  req: NextRequest,
  { params }: { params: { id: string } }
) {
  const { id } = params;

    const cookieStore = cookies();
  const authToken = cookieStore.get("auth-token");
  ;
  const prisma = new PrismaClient({
    datasourceUrl: authToken?.value,
  });
  try {
    await prisma.city.delete({ where: { id: id } });
    prisma.city.update;
    return new Response(JSON.stringify({ id: id }), { status: 200 });
  } catch (error) {
    return new Response(JSON.stringify({ error: "Error: " + error }), {
      status: 500,
    });
  }
}

export async function PUT(
  req: NextRequest,
  { params }: { params: { id: string } }
) {
  const body = await req.json();

    const cookieStore = cookies();
  const authToken = cookieStore.get("auth-token");
  ;
  const prisma = new PrismaClient({
    datasourceUrl: authToken?.value,
  });
  try {
    const { name } = body;
    const { id } = params;
    await prisma.city.update({ where: { id: id }, data: { name: name } });
    return new Response(JSON.stringify({ name: name }), { status: 200 });
  } catch (error) {
    return new Response(JSON.stringify({ error: "Error: " + error }), {
      status: 500,
    });
  }
}

==================================================
File: .\src\app\api\clients\route.ts
import { db } from "@/config/globals";
import { PrismaClient } from "@prisma/client";
import { NextRequest } from "next/server";
import { cookies } from "next/headers";


export async function GET(req: NextRequest) {
  const url = new URL(req.url);
  const pageIndex = Number(url.searchParams.get("index"));
  const take = 20;
  const skip = pageIndex * take;

    const cookieStore = cookies();
  const authToken = cookieStore.get("auth-token");
  ;
  const prisma = new PrismaClient({
    datasourceUrl: authToken?.value,
  });
  try {
    const data = await prisma.client.findMany({
      skip: skip,
      take: take,
      orderBy: { id: "desc" },
      include: {
        city: true,
        orders: true,
      },
      where: {
        name: {
          contains: url.searchParams.get("name") || "",
        },
      },
    });
    const count = await prisma.client.count();
    return new Response(JSON.stringify({ clients: data, total: count }), {
      status: 200,
    });
  } catch (error) {
    console.log(error);
    return new Response(JSON.stringify({ error: "Error: " + error }), {
      status: 500,
    });
  }
}

export async function POST(req: NextRequest) {
  const body = await req.json();
    const cookieStore = cookies();
  const authToken = cookieStore.get("auth-token");
  ;
  const prisma = new PrismaClient({
    datasourceUrl: authToken?.value,
  });
  try {
    const { name, cityId, adress, phone } = body;
    const data = await prisma.client.create({
      data: {
        name,
        cityId,
        adress,
        phone,
      },
    });
    return new Response(JSON.stringify({ client: data }), { status: 201 });
  } catch (error) {
    console.log(error);
    return new Response(JSON.stringify({ error: "Error: " + error }), {
      status: 500,
    });
  }
}

==================================================
File: .\src\app\api\clients\query\route.ts
import { db } from "@/config/globals";
import { PrismaClient } from "@prisma/client";
import { NextRequest } from "next/server";
import { cookies } from "next/headers";


type ZeroOrdersClient = {
  name: string;
};

export async function GET(req: NextRequest) {
    const cookieStore = cookies();
  const authToken = cookieStore.get("auth-token");
  ;
  const prisma = new PrismaClient({
    datasourceUrl: authToken?.value,
  });
  try {
    const data = await prisma.$queryRaw<ZeroOrdersClient[]>`SELECT c.name As name 
    FROM clients c
    WHERE id NOT IN (
      SELECT client_id 
      FROM orders
    );`;

    return new Response(JSON.stringify({ result: data }), { status: 200 });
  } catch (error) {
    console.error(error);
    return new Response(JSON.stringify({ error: "Error: " + error }), {
      status: 500,
    });
  }
}

==================================================
File: .\src\app\api\clients\[id]\route.ts
import { db } from "@/config/globals";
import { PrismaClient } from "@prisma/client";
import { NextRequest } from "next/server";
import { cookies } from "next/headers";


export async function GET(
  req: NextRequest,
  { params }: { params: { id: string } }
) {
  const { id } = params;

    const cookieStore = cookies();
  const authToken = cookieStore.get("auth-token");
  ;
  const prisma = new PrismaClient({
    datasourceUrl: authToken?.value,
  });
  try {
    const data = await prisma.client.findUnique({
      where: {
        id: id,
      },
      include: {
        city: true,
        orders: {
          include: {
            agencyProduct: {
              include: {
                product: true,
              }
            },
            agency: true,
            paymentForm: true,
          }
        },
      },
    });
    return new Response(JSON.stringify({ client: data }), { status: 200 });
  } catch (error) {
    console.error(error);
    return new Response(JSON.stringify({ error: "Error: " + error }), {
      status: 500,
    });
  }
}

export async function DELETE(
  req: NextRequest,
  { params }: { params: { id: string } }
) {
  const { id } = params;

    const cookieStore = cookies();
  const authToken = cookieStore.get("auth-token");
  ;
  const prisma = new PrismaClient({
    datasourceUrl: authToken?.value,
  });
  try {
    await prisma.client.delete({ where: { id: id } });
    prisma.client.update;
    return new Response(JSON.stringify({ id: id }), { status: 200 });
  } catch (error) {
    return new Response(JSON.stringify({ error: "Error: " + error }), {
      status: 500,
    });
  }
}

export async function PUT(
  req: NextRequest,
  { params }: { params: { id: string } }
) {
  const body = await req.json();

    const cookieStore = cookies();
  const authToken = cookieStore.get("auth-token");
  ;
  const prisma = new PrismaClient({
    datasourceUrl: authToken?.value,
  });
  try {
    const { name, adress, phone, cityId } = body;
    const { id } = params;
    await prisma.client.update({
      where: { id: id },
      data: {
        name,
        adress,
        phone,
        cityId,
      },
    });
    return new Response(JSON.stringify({ id: id }), { status: 200 });
  } catch (error) {
    return new Response(JSON.stringify({ error: "Error: " + error }), {
      status: 500,
    });
  }
}
==================================================
File: .\src\app\api\orders\route.ts
import { db } from "@/config/globals";
import { PrismaClient } from "@prisma/client";
import { NextRequest } from "next/server";
import { cookies } from "next/headers";


export async function GET(req: NextRequest) {
  const url = new URL(req.url);
  const pageIndex = Number(url.searchParams.get("index"));
  const take = 20;
  const skip = pageIndex * take;

    const cookieStore = cookies();
  const authToken = cookieStore.get("auth-token");
  ;
  const prisma = new PrismaClient({
    datasourceUrl: authToken?.value,
  });
  try {
    const data = await prisma.order.findMany({
      skip: skip,
      take: take,
      orderBy: { id: "desc" },
      include: {
        client: true,
        agency: true,
        paymentForm: true,
        agencyProduct: {
          include: {
            product: true,
          },
        },
      },
      where: {
        client: {
          name: {
            contains: url.searchParams.get("name") || "",
          },
        },
      },
    });
    const count = await prisma.order.count();
    return new Response(JSON.stringify({ orders: data, total: count }), {
      status: 200,
    });
  } catch (error) {
    console.log(error);
    return new Response(JSON.stringify({ error: "Error: " + error }), {
      status: 500,
    });
  }
}

export async function POST(req: NextRequest) {
  const body = await req.json();
    const cookieStore = cookies();
  const authToken = cookieStore.get("auth-token");
  ;
  const prisma = new PrismaClient({
    datasourceUrl: authToken?.value,
  });
  try {
    const { clientId, agencyId, agencyProductId, paymentFormId, amount } = body;
    const data = await prisma.order.create({
      data: {
        clientId,
        agencyId,
        agencyProductId,
        paymentFormId,
        amount,
        created: new Date(),
      },
    });
    return new Response(JSON.stringify({ order: data }), { status: 201 });
  } catch (error) {
    return new Response(JSON.stringify({ error: "Error: " + error }), {
      status: 500,
    });
  }
}

==================================================
File: .\src\app\api\orders\query\route.ts
import { db } from "@/config/globals";
import { PrismaClient } from "@prisma/client";
import { NextRequest } from "next/server";
import { cookies } from "next/headers";


type ClientAmount = {
  name: string;
  amount: number;
  order_volume: string;
}

export async function GET(req: NextRequest) {
  const url = new URL(req.url);
  const amount = Number(url.searchParams.get("amount"));

    const cookieStore = cookies();
  const authToken = cookieStore.get("auth-token");
  ;
  const prisma = new PrismaClient({
    datasourceUrl: authToken?.value,
  });
  try {
    // const data =
    // await prisma.$queryRaw<ClientAmount[]>`SELECT c.name AS name, SUM(o.amount)::int AS amount 
    // FROM clients c 
    // JOIN orders o ON c.id = o.client_id 
    // GROUP BY c.name
    // HAVING AVG(o.amount) > ${amount};`;
    const data =
    await prisma.$queryRaw<ClientAmount[]>`SELECT a.name AS name,
    SUM(o.amount)::int AS amount,
    CASE
        WHEN SUM(o.amount)::int > ${amount} THEN 'Высокое кол-во'
        ELSE 'Низкое кол-во'
    END AS order_volume
    FROM orders o
    JOIN agencies a ON o.agency_id = a.id
    GROUP BY a.id, a.name;`;

    return new Response(JSON.stringify({ result: data }), { status: 200 });
  } catch (error) {
    console.error(error);
    return new Response(JSON.stringify({ error: "Error: " + error }), {
      status: 500,
    });
  }
}

==================================================
File: .\src\app\api\orders\[id]\route.ts
import { db } from "@/config/globals";
import { PrismaClient } from "@prisma/client";
import { NextRequest } from "next/server";
import { cookies } from "next/headers";


export async function DELETE(
  req: NextRequest,
  { params }: { params: { id: string } }
) {
  const { id } = params;

    const cookieStore = cookies();
  const authToken = cookieStore.get("auth-token");
  ;
  const prisma = new PrismaClient({
    datasourceUrl: authToken?.value,
  });
  try {
    await prisma.order.delete({ where: { id: id } });
    prisma.order.update;
    return new Response(JSON.stringify({ id: id }), { status: 200 });
  } catch (error) {
    return new Response(JSON.stringify({ error: "Error: " + error }), {
      status: 500,
    });
  }
}

export async function PUT(
  req: NextRequest,
  { params }: { params: { id: string } }
) {
  const body = await req.json();

    const cookieStore = cookies();
  const authToken = cookieStore.get("auth-token");
  ;
  const prisma = new PrismaClient({
    datasourceUrl: authToken?.value,
  });
  try {
    const { clientId, agencyId, agencyProductId, paymentFormId, amount, created, completed } = body;
    const { id } = params;
    await prisma.order.update({
      where: { id: id },
      data: {
        clientId,
        agencyId,
        agencyProductId,
        paymentFormId,
        amount,
        created,
        completed,
      },
    });
    return new Response(JSON.stringify({ id: id }), { status: 200 });
  } catch (error) {
    return new Response(JSON.stringify({ error: "Error: " + error }), {
      status: 500,
    });
  }
}

==================================================
File: .\src\app\api\payment-forms\route.ts
import { db } from "@/config/globals";
import { PrismaClient } from "@prisma/client";
import { NextRequest } from "next/server";
import { cookies } from "next/headers";


export async function GET(req: NextRequest) {
  const url = new URL(req.url);
  const pageIndex = url.searchParams.get("index");
  const take = 20;
  const skip = pageIndex ? Number(pageIndex) * take : undefined;

    const cookieStore = cookies();
  const authToken = cookieStore.get("auth-token");
  ;
  const prisma = new PrismaClient({
    datasourceUrl: authToken?.value,
  });
  try {
    const data = await prisma.paymentForm.findMany({
      skip: skip,
      take: pageIndex ? take : undefined,
      orderBy: { id: "desc" },
      where: {
        name: {
          contains: url.searchParams.get("name") || "",
        },
      },
    });
    const count = await prisma.paymentForm.count();
    return new Response(JSON.stringify({ paymentForms: data, total: count }), {
      status: 200,
    });
  } catch (error) {
    console.log(error);
    return new Response(JSON.stringify({ error: "Error: " + error }), {
      status: 500,
    });
  }
}

export async function POST(req: NextRequest) {
  const body = await req.json();
    const cookieStore = cookies();
  const authToken = cookieStore.get("auth-token");
  ;
  const prisma = new PrismaClient({
    datasourceUrl: authToken?.value,
  });
  try {
    const { name } = body;
    const paymentForm = await prisma.paymentForm.create({
      data: {
        name,
      },
    });
    return new Response(JSON.stringify({ paymentForm }), { status: 201 });
  } catch (error) {
    return new Response(JSON.stringify({ error: "Error: " + error }), {
      status: 500,
    });
  }
}

==================================================
File: .\src\app\api\payment-forms\[id]\route.ts
import { db } from "@/config/globals";
import { PrismaClient } from "@prisma/client";
import { NextRequest } from "next/server";
import { cookies } from "next/headers";


export async function DELETE(
  req: NextRequest,
  { params }: { params: { id: string } }
) {
  const { id } = params;

    const cookieStore = cookies();
  const authToken = cookieStore.get("auth-token");
  ;
  const prisma = new PrismaClient({
    datasourceUrl: authToken?.value,
  });
  try {
    await prisma.paymentForm.delete({ where: { id: id } });
    prisma.paymentForm.update;
    return new Response(JSON.stringify({ id: id }), { status: 200 });
  } catch (error) {
    return new Response(JSON.stringify({ error: "Error: " + error }), {
      status: 500,
    });
  }
}

export async function PUT(
  req: NextRequest,
  { params }: { params: { id: string } }
) {
  const body = await req.json();
    const cookieStore = cookies();
  const authToken = cookieStore.get("auth-token");
  ;
  const prisma = new PrismaClient({
    datasourceUrl: authToken?.value,
  });
  try {
    const { name } = body;
    const { id } = params;
    await prisma.paymentForm.update({ where: { id: id }, data: { name: name } });
    return new Response(JSON.stringify({ name: name }), { status: 200 });
  } catch (error) {
    return new Response(JSON.stringify({ error: "Error: " + error }), {
      status: 500,
    });
  }
}

==================================================
File: .\src\app\api\products\route.ts
import { db } from "@/config/globals";
import { PrismaClient } from "@prisma/client";
import { NextRequest } from "next/server";
import { cookies } from "next/headers";


export async function GET(req: NextRequest) {
  const url = new URL(req.url);
  const pageIndex = url.searchParams.get("index");
  const take = 20;
  const skip = pageIndex ? Number(pageIndex) * take : undefined;

    const cookieStore = cookies();
  const authToken = cookieStore.get("auth-token");
  ;
  const prisma = new PrismaClient({
    datasourceUrl: authToken?.value,
  });
  try {
    const data = await prisma.product.findMany({
      skip: skip,
      take: pageIndex ? take : undefined,
      orderBy: { id: "desc" },
      where: {
        name: {
          contains: url.searchParams.get("name") || "",
        },
      },
    });
    const count = await prisma.product.count();
    return new Response(JSON.stringify({ products: data, total: count }), {
      status: 200,
    });
  } catch (error) {
    console.log(error);
    return new Response(JSON.stringify({ error: "Error: " + error }), {
      status: 500,
    });
  }
}

export async function POST(req: NextRequest) {
  const body = await req.json();
    const cookieStore = cookies();
  const authToken = cookieStore.get("auth-token");
  ;
  const prisma = new PrismaClient({
    datasourceUrl: authToken?.value,
  });
  try {
    const { name } = body;
    const product = await prisma.product.create({
      data: {
        name,
      },
    });
    return new Response(JSON.stringify({ product }), { status: 201 });
  } catch (error) {
    return new Response(JSON.stringify({ error: "Error: " + error }), {
      status: 500,
    });
  }
}

==================================================
File: .\src\app\api\products\[id]\route.ts
import { db } from "@/config/globals";
import { PrismaClient } from "@prisma/client";
import { NextRequest } from "next/server";
import { cookies } from "next/headers";


export async function DELETE(
  req: NextRequest,
  { params }: { params: { id: string } }
) {
  const { id } = params;

    const cookieStore = cookies();
  const authToken = cookieStore.get("auth-token");
  ;
  const prisma = new PrismaClient({
    datasourceUrl: authToken?.value,
  });
  try {
    await prisma.product.delete({ where: { id: id } });
    prisma.product.update;
    return new Response(JSON.stringify({ id: id }), { status: 200 });
  } catch (error) {
    return new Response(JSON.stringify({ error: "Error: " + error }), {
      status: 500,
    });
  }
}

export async function PUT(
  req: NextRequest,
  { params }: { params: { id: string } }
) {
  const body = await req.json();
    const cookieStore = cookies();
  const authToken = cookieStore.get("auth-token");
  ;
  const prisma = new PrismaClient({
    datasourceUrl: authToken?.value,
  });
  try {
    const { name } = body;
    const { id } = params;
    await prisma.product.update({ where: { id: id }, data: { name: name } });
    return new Response(JSON.stringify({ name: name }), { status: 200 });
  } catch (error) {
    return new Response(JSON.stringify({ error: "Error: " + error }), {
      status: 500,
    });
  }
}

==================================================
File: .\src\app\api\property-types\route.ts
import { db } from "@/config/globals";
import { PrismaClient } from "@prisma/client";
import { NextRequest } from "next/server";
import { cookies } from "next/headers";


export async function GET(req: NextRequest) {
  const url = new URL(req.url);
  const pageIndex = url.searchParams.get("index");
  const take = 20;
  const skip = pageIndex ? Number(pageIndex) * take : undefined;

    const cookieStore = cookies();
  const authToken = cookieStore.get("auth-token");
  ;
  const prisma = new PrismaClient({
    datasourceUrl: authToken?.value,
  });
  try {
    const data = await prisma.propertyType.findMany({
      skip: skip,
      take: pageIndex ? take : undefined,
      orderBy: { id: "desc" },
      where: {
        name: {
          contains: url.searchParams.get("name") || "",
        },
      },
    });
    const count = await prisma.propertyType.count();
    return new Response(JSON.stringify({ propertyTypes: data, total: count }), {
      status: 200,
    });
  } catch (error) {
    console.log(error);
    return new Response(JSON.stringify({ error: "Error: " + error }), {
      status: 500,
    });
  }
}

export async function POST(req: NextRequest) {
  const body = await req.json();
    const cookieStore = cookies();
  const authToken = cookieStore.get("auth-token");
  ;
  const prisma = new PrismaClient({
    datasourceUrl: authToken?.value,
  });
  try {
    const { name } = body;
    const propertyType = await prisma.propertyType.create({
      data: {
        name,
      },
    });
    return new Response(JSON.stringify({ propertyType }), { status: 201 });
  } catch (error) {
    return new Response(JSON.stringify({ error: "Error: " + error }), {
      status: 500,
    });
  }
}

==================================================
File: .\src\app\api\property-types\[id]\route.ts
import { db } from "@/config/globals";
import { PrismaClient } from "@prisma/client";
import { NextRequest } from "next/server";
import { cookies } from "next/headers";


export async function DELETE(
  req: NextRequest,
  { params }: { params: { id: string } }
) {
  const { id } = params;

    const cookieStore = cookies();
  const authToken = cookieStore.get("auth-token");
  ;
  const prisma = new PrismaClient({
    datasourceUrl: authToken?.value,
  });
  try {
    await prisma.propertyType.delete({ where: { id: id } });
    prisma.propertyType.update;
    return new Response(JSON.stringify({ id: id }), { status: 200 });
  } catch (error) {
    return new Response(JSON.stringify({ error: "Error: " + error }), {
      status: 500,
    });
  }
}

export async function PUT(
  req: NextRequest,
  { params }: { params: { id: string } }
) {
  const body = await req.json();
    const cookieStore = cookies();
  const authToken = cookieStore.get("auth-token");
  ;
  const prisma = new PrismaClient({
    datasourceUrl: authToken?.value,
  });
  try {
    const { name } = body;
    const { id } = params;
    await prisma.propertyType.update({
      where: { id: id },
      data: { name: name },
    });
    return new Response(JSON.stringify({ name: name }), { status: 200 });
  } catch (error) {
    return new Response(JSON.stringify({ error: "Error: " + error }), {
      status: 500,
    });
  }
}

==================================================
File: .\src\app\api\users\route.ts
import { db } from "@/config/globals";
import { PrismaClient } from "@prisma/client";
import { NextRequest } from "next/server";
import { cookies } from "next/headers";


export async function GET(req: NextRequest) {
  const url = new URL(req.url);
  const pageIndex = Number(url.searchParams.get("index"));
  const take = 20;
  const skip = pageIndex * take;

    const cookieStore = cookies();
  const authToken = cookieStore.get("auth-token");
  ;
  const prisma = new PrismaClient({
    datasourceUrl: authToken?.value,
  });
  try {
    const data = await prisma.user.findMany({
      skip: skip,
      take: take,
      orderBy: { id: "desc" },
      include: {
        agencies: true,
      },
      where: {
        login: {
          contains: url.searchParams.get("name") || "",
        },
      },
    });
    const count = await prisma.user.count();
    return new Response(JSON.stringify({ users: data, total: count }), {
      status: 200,
    });
  } catch (error) {
    console.log(error);
    return new Response(JSON.stringify({ error: "Error: " + error }), {
      status: 500,
    });
  }
}

export async function POST(req: NextRequest) {
  const body = await req.json();
    const cookieStore = cookies();
  const authToken = cookieStore.get("auth-token");
  ;
  const prisma = new PrismaClient({
    datasourceUrl: authToken?.value,
  });
  try {
    const { login, role, agencyId, password } = body;
    console.log(body);
    await prisma.$queryRawUnsafe(`
    CREATE USER "${login}" WITH PASSWORD '${password}' IN ROLE "${role}";
    `);
    const data = await prisma.user.create({
      data: {
        login,
        role,
        agencyId,
      },
    });
    return new Response(JSON.stringify({ user: data }), { status: 201 });
  } catch (error) {
    console.log(error);
    return new Response(JSON.stringify({ error: "Error: " + error }), {
      status: 500,
    });
  }
}

==================================================
File: .\src\app\api\users\[id]\route.ts
import { db } from "@/config/globals";
import { PrismaClient } from "@prisma/client";
import { cookies } from "next/headers";
import { NextRequest } from "next/server";

export async function DELETE(
  req: NextRequest,
  { params }: { params: { id: string } }
) {
  const { id } = params;

  const cookieStore = cookies();
  const authToken = cookieStore.get("auth-token");
  ;
  const prisma = new PrismaClient({
    datasourceUrl: authToken?.value,
  });
  try {
    await prisma.user.delete({ where: { id: id } });
    prisma.user.update;
    return new Response(JSON.stringify({ id: id }), { status: 200 });
  } catch (error) {
    return new Response(JSON.stringify({ error: "Error: " + error }), {
      status: 500,
    });
  }
}

export async function PUT(
  req: NextRequest,
  { params }: { params: { id: string } }
) {
  const body = await req.json();
  const cookieStore = cookies();
  const authToken = cookieStore.get("auth-token");
  ;
  const prisma = new PrismaClient({
    datasourceUrl: authToken?.value,
  });
  try {
    const { login, role, agencyId, password } = body;
    const { id } = params;
    // await prisma.$queryRawUnsafe(`
    // ALTER USER ${login} RENAME TO ${tbLogin.Text}; ALTER USER {tbLogin.Text} WITH PASSWORD '{tbLogin.Text}';
    // `);
    await prisma.user.update({
      where: { id: id },
      data: {
        login,
        role,
        agencyId,
      },
    });
    return new Response(JSON.stringify({ login: login }), { status: 200 });
  } catch (error) {
    console.log(error);
    return new Response(JSON.stringify({ error: "Error: " + error }), {
      status: 500,
    });
  }
}

==================================================
File: .\src\app\auth\page.tsx
"use client";

import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { SuccessAlert } from "@/components/success-alert";
import { ErrorAlert } from "@/components/error-alert";
import { Input } from "@/components/ui/input";

import { useForm } from "react-hook-form";
import { z } from "zod";
import { zodResolver } from "@hookform/resolvers/zod";
import { loginForm } from "@/lib/forms/login.form";

import { useMutation } from "@tanstack/react-query";
import { toast } from "sonner";
import axios from "axios";
import { useRouter } from "next/navigation";
import { NextResponse } from "next/server";
import { cookies } from 'next/headers';

export default function AuthPage() {
  const router = useRouter();

  const form  = useForm<z.infer<typeof loginForm>>({
    resolver: zodResolver(loginForm),
  });
  const { mutate } = useMutation({
    mutationFn: (data: z.infer<typeof loginForm>) => login(data),
    onSuccess: () =>
      toast(<SuccessAlert successDescription={"Авторизация прошла успешно!"} />),
    onError: (error) =>
      toast(<ErrorAlert errorDescription={error.toString()} />),
  });

  const onSubmit = async (data: z.infer<typeof loginForm>) => {
    await mutate(data);
    form.reset();
  };

  const login = async (data: z.infer<typeof loginForm>) => {
    const responsetoken = await axios.post("/api/auth", data);
    const token = responsetoken.data.token;
    console.log(token);
    form.reset();
    router.push("/cities");
  };

  return (
    <div className="flex min-h-screen flex-col content-center place-content-center items-center bg-gradient-to-r from-cyan-500 to-blue-500">
      <Card>
        <CardHeader>
          <CardTitle>Вход</CardTitle>
        </CardHeader>
        <Form {...form}>
          <form onSubmit={form.handleSubmit(onSubmit)}>
            <CardContent className="space-y-2">
              <FormField
                control={form.control}
                name="login"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Логин</FormLabel>
                    <FormControl>
                      <Input placeholder="Введите логин" {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                control={form.control}
                name="password"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Пароль</FormLabel>
                    <FormControl>
                      <Input placeholder="Введите пароль" {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
            </CardContent>
            <CardFooter>
              <Button type="submit">Вход</Button>
            </CardFooter>
          </form>
        </Form>
      </Card>
    </div>
  );
}

==================================================
File: .\src\components\dashboard.tsx
"use client";

import { Button } from "@/components/ui/button";
import Link from "next/link";
import { db, isAuthorized, setIsAuthorized } from "@/config/globals";
import { useRouter } from "next/navigation";

export default function Dashboard() {
  const router = useRouter();

  const logout = async () => {
    document.cookie = `auth-token=; Max-Age=0; path=/`;
    router.push("/auth");
  };

  return (
    <div>
      <Link
        href="/user"
        className="group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/50 data-[state=open]:bg-accent/50 mx-1"
      >
        {db.login} / {db.role}
      </Link>
      <Button onClick={logout}>Выход</Button>
    </div>
  );
}

==================================================
File: .\src\components\delete-dialog.tsx
"use client";

import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
  AlertDialogTrigger,
} from "@/components/ui/alert-dialog";
import { Button } from "@/components/ui/button";
import { useMutation } from "@tanstack/react-query";
import { useQueryClient } from "@tanstack/react-query";
import axios from "axios";

type Props = {
  table: string;
  id: string;
};

export default function DeleteDialog({ id, table }: Props) {
  const queryClient = useQueryClient();
  const { mutate } = useMutation({
    mutationFn: () => axios.delete(`/api/${table}/${id}`),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: [table] });
    },
  });

  function remove() {
    mutate();
  }

  return (
    <AlertDialog>
      <AlertDialogTrigger asChild>
        <Button variant="link" className="text-red-500">
          Удалить
        </Button>
      </AlertDialogTrigger>
      <AlertDialogContent>
        <AlertDialogHeader>
          <AlertDialogTitle>Вы уверены?</AlertDialogTitle>
          <AlertDialogDescription>
            Это действие нельзя отменить. Это приведет к окончательному удалению
            города с наших серверов.
          </AlertDialogDescription>
        </AlertDialogHeader>
        <AlertDialogFooter>
          <AlertDialogCancel>Отмена</AlertDialogCancel>
          <AlertDialogAction onClick={remove}>Продолжить</AlertDialogAction>
        </AlertDialogFooter>
      </AlertDialogContent>
    </AlertDialog>
  );
}

==================================================
File: .\src\components\error-alert.tsx
import { AlertCircle } from "lucide-react";

import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";

type Props = {
  errorDescription: string;
};

export function ErrorAlert({ errorDescription }: Props) {
  return (
    <Alert variant="destructive">
      <AlertCircle className="h-4 w-4" />
      <AlertTitle>Ошибка</AlertTitle>
      <AlertDescription>{errorDescription}</AlertDescription>
    </Alert>
  );
}

==================================================
File: .\src\components\search.tsx
"use client";

import { Input } from "@/components/ui/input";
import debounce from "lodash.debounce";
import { ChangeEvent, useState } from "react";
import { Label } from "./ui/label";

type Props = {
  setSearchQuery: (searchQuery: string) => any;
};

export default function Search({ setSearchQuery }: Props) {

  const debouncedChange = debounce(search, 300);

  const [searchInput, setSearchInput] = useState("");
  function search(event: ChangeEvent<HTMLInputElement>) {
    setSearchInput(event.target.value);
    setSearchQuery(event.target.value);
  }

  return (
    <div className="flex flex-col self-center py-8 space-y-2">
      <Label htmlFor="searchQuery">Поиск</Label>
      <Input
      name="searchQuery"
      className="max-w-xs "
      placeholder="..."
      onChange={debouncedChange}
    />
    </div>
    
  );
}

==================================================
File: .\src\components\success-alert.tsx
import { CheckCheck } from "lucide-react";

import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";

type Props = {
  successDescription: string;
};

export function SuccessAlert({ successDescription }: Props) {
  return (
    <Alert>
      <CheckCheck className="h-4 w-4" />
      <AlertTitle>Успешно</AlertTitle>
      <AlertDescription>{successDescription}</AlertDescription>
    </Alert>
  );
}

==================================================
File: .\src\components\table-pagination.tsx
import {
  Pagination,
  PaginationContent,
  PaginationItem,
  PaginationLink,
  PaginationNext,
  PaginationPrevious,
} from "@/components/ui/pagination";
import { cn } from "@/lib/utils";

type Props = {
  pageIndex: number;
  setPageIndex: (pageIndex: number) => any;
  isFirstPage: boolean;
  isLastPage: boolean;
};

export default function TablePagination({
  pageIndex,
  setPageIndex,
  isFirstPage,
  isLastPage,
}: Props) {

  return (
    <Pagination>
      <PaginationContent>
        <PaginationItem>
          <PaginationPrevious
            aria-disabled={isFirstPage}
            className={ 
              cn(isFirstPage ? "pointer-events-none opacity-50" : undefined, "cursor-pointer")
            }
            onClick={() => setPageIndex(pageIndex - 1)}
          />
        </PaginationItem>
        <PaginationItem>
          <PaginationLink>{pageIndex + 1}</PaginationLink>
        </PaginationItem>
        <PaginationItem>
          <PaginationNext
            aria-disabled={isLastPage}
            className={
              cn(isLastPage ? "pointer-events-none opacity-50" : undefined, "cursor-pointer")
            }
            onClick={() => setPageIndex(pageIndex + 1)}
          />
        </PaginationItem>
      </PaginationContent>
    </Pagination>
  );
}

==================================================
File: .\src\components\layout\my-footer.tsx
export default function Footer() {
  return (
    <footer className="flex bg-zinc-950 text-white flex-col items-center p-24 mt-20">
      ПИ-21а Первий Д. Д. 2024
    </footer>
  );
}

==================================================
File: .\src\components\layout\my-navigation.tsx
import {
  NavigationMenu,
  NavigationMenuContent,
  NavigationMenuItem,
  NavigationMenuLink,
  NavigationMenuList,
  NavigationMenuTrigger,
  navigationMenuTriggerStyle,
} from "@/components/ui/navigation-menu";
import { Button } from "@/components/ui/button";
import React from "react";
import { cn } from "@/lib/utils";
import Link from "next/link";
import Dashboard from "../dashboard";

const references: { title: string; href: string; description: string }[] = [
  {
    title: "Города",
    href: "http://localhost:3000/cities",
    description: "Справочник городов.",
  },
  {
    title: "Типы собственности",
    href: "http://localhost:3000/property_types",
    description: "Справочник типов собственности.",
  },
  {
    title: "Продукция",
    href: "http://localhost:3000/products",
    description: "Справочник продукции.",
  },
  {
    title: "Типы платежа",
    href: "http://localhost:3000/payment_forms",
    description: "Справочник типов платежей.",
  },
];

const tables: { title: string; href: string; description: string }[] = [
  {
    title: "Агенства",
    href: "http://localhost:3000/agencies",
    description: "Таблица агенств.",
  },
  {
    title: "Продукция агенств",
    href: "http://localhost:3000/agency_products",
    description: "Таблица продукции агенств.",
  },
  {
    title: "Клиенты",
    href: "http://localhost:3000/clients",
    description: "Таблица клиентов рекламных агенств.",
  },
  {
    title: "Заказы",
    href: "http://localhost:3000/orders",
    description: "Таблица заказов клиентов.",
  },
  {
    title: "Пользователи",
    href: "http://localhost:3000/users",
    description: "Таблица пользователей БД.",
  },
];

export default function Navigation() {
  return (
    <header className="flex justify-between p-2">
      <NavigationMenu>
        <NavigationMenuList>
          <NavigationMenuItem>
            <Link href="/queries" legacyBehavior passHref>
              <NavigationMenuLink className={navigationMenuTriggerStyle()}>
                Зарпосы
              </NavigationMenuLink>
            </Link>
          </NavigationMenuItem>
          <NavigationMenuItem>
            <NavigationMenuTrigger>Таблицы</NavigationMenuTrigger>
            <NavigationMenuContent>
              <ul className="grid w-[400px] gap-3 p-4 md:w-[500px] md:grid-cols-2 lg:w-[600px] ">
                {tables.map((table) => (
                  <ListItem
                    key={table.title}
                    title={table.title}
                    href={table.href}
                  >
                    {table.description}
                  </ListItem>
                ))}
              </ul>
            </NavigationMenuContent>
          </NavigationMenuItem>
          <NavigationMenuItem>
            <NavigationMenuTrigger>Справочники</NavigationMenuTrigger>
            <NavigationMenuContent>
              <ul className="grid w-[400px] gap-3 p-4 md:w-[500px] md:grid-cols-2 lg:w-[600px] ">
                {references.map((ref) => (
                  <ListItem key={ref.title} title={ref.title} href={ref.href}>
                    {ref.description}
                  </ListItem>
                ))}
              </ul>
            </NavigationMenuContent>
          </NavigationMenuItem>
        </NavigationMenuList>
      </NavigationMenu>
      <Dashboard />
    </header>
  );
}

const ListItem = React.forwardRef<
  React.ElementRef<"a">,
  React.ComponentPropsWithoutRef<"a">
>(({ className, title, children, ...props }, ref) => {
  return (
    <li>
      <NavigationMenuLink asChild>
        <a
          ref={ref}
          className={cn(
            "block select-none space-y-1 rounded-md p-3 leading-none no-underline outline-none transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground",
            className
          )}
          {...props}
        >
          <div className="text-sm font-medium leading-none">{title}</div>
          <p className="line-clamp-2 text-sm leading-snug text-muted-foreground">
            {children}
          </p>
        </a>
      </NavigationMenuLink>
    </li>
  );
});
ListItem.displayName = "ListItem";

==================================================
File: .\src\components\references\cities-stats.tsx
"use client";

import { useCitiesStats } from "@/hooks/use-cities-stats";
import debounce from "lodash.debounce";
import { ChangeEvent, useState } from "react";
import {
  BarChart,
  Bar,
  ResponsiveContainer,
  Tooltip,
  XAxis,
  YAxis,
} from "recharts";
import { Input } from "@/components/ui/input";

export default function CityChart() {
  const [amount, setAmount] = useState(0);
  const { result } = useCitiesStats(amount);

  const search = (event: ChangeEvent<HTMLInputElement>) => {
    setAmount(Number(event.target.value));
  };
  const debouncedChange = debounce(search, 300);

  return (
    <div className="h-72 my-10">
      <div className="">
        <p className="flex flex-row space-x-5 mb-4">
          Запрос на запросе по принципу итогового запроса - выводит
          города, в которых количество заказов больше 
          <Input
            name="searchQuery"
            className="w-12 mx-2"
            placeholder="..."
            onChange={debouncedChange}
          />
        </p>
      </div>

      {result === undefined ? (
        <div className="m-40">
          <p className="text-center">Загрузка...</p>
        </div>
      ) : (
        <ResponsiveContainer width={"90%"} height={"100%"}>
          <BarChart data={result} width={150} height={40}>
            <Tooltip />
            <XAxis dataKey="name" />
            <YAxis />
            <Bar dataKey="amount" barSize={20} fill="#8884d8" />
          </BarChart>
        </ResponsiveContainer>
      )}
    </div>
  );
}

==================================================
File: .\src\components\references\city-table.tsx
"use client";

import {
  Table,
  TableBody,
  TableCaption,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { City } from "@/models/city";
import AddDialog from "@/components/references/ref-create-dialog";
import PutDialog from "@/components/references/ref-put-dialog";
import DeleteDialog from "@/components/delete-dialog";

type Props = {
  cities: City[] | undefined;
  total: number | undefined;
};

export default function CityTable({ cities, total }: Props) {
  return (
    <>
      {!cities ? (
        <div className="m-40">
          <p className="text-center">Загрузка...</p>
        </div>
      ) : (
        <Table>
          <TableCaption>
            Всего записей: {total}. <AddDialog table="cities"/>
          </TableCaption>
          <TableHeader>
            <TableHead className="w-[350px]">ИД</TableHead>
            <TableHead className="w-[200px]">Название</TableHead>
            <TableHead>Действия</TableHead>
          </TableHeader>
          <TableBody>
            {cities.map((city) => (
              <TableRow key={city.id}>
                <TableCell className="text-sm">{city.id}</TableCell>
                <TableCell>{city.name}</TableCell>
                <TableCell>
                  <PutDialog id={city.id} table="cities" />
                  <DeleteDialog id={city.id} table="cities"/>
                </TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
      )}
    </>
  );
}

==================================================
File: .\src\components\references\payment-form-table.tsx
"use client";

import {
  Table,
  TableBody,
  TableCaption,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { PaymentForm } from "@/models/payment-form";
import CreateDialog from "@/components/references/ref-create-dialog";
import DeleteDialog from "@/components/delete-dialog";
import PutDialog from "@/components/references/ref-put-dialog";

type Props = {
  paymentForms: PaymentForm[] | undefined;
  total: number | undefined;
};

export default function PaymentFormTable({ paymentForms, total }: Props) {
  return (
    <>
      {!paymentForms ? (
        <div className="m-40">
          <p className="text-center">Загрузка...</p>
        </div>
      ) : (
        <Table>
          <TableCaption>
            Всего записей: {total}. <CreateDialog table="payment-forms" />
          </TableCaption>
          <TableHeader>
            <TableHead className="w-[350px]">ИД</TableHead>
            <TableHead className="w-[200px]">Название</TableHead>
            <TableHead>Действия</TableHead>
          </TableHeader>
          <TableBody>
            {paymentForms.map((paymentForm) => (
              <TableRow key={paymentForm.id}>
                <TableCell className="text-sm">{paymentForm.id}</TableCell>
                <TableCell>{paymentForm.name}</TableCell>
                <TableCell>
                  <PutDialog id={paymentForm.id} table="payment-forms" />
                  <DeleteDialog id={paymentForm.id} table="payment-forms" />
                </TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
      )}
    </>
  );
}

==================================================
File: .\src\components\references\product-table.tsx
"use client";

import {
  Table,
  TableBody,
  TableCaption,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { Product } from "@/models/product";
import AddDialog from "@/components/references/ref-create-dialog";
import PutDialog from "@/components/references/ref-put-dialog";
import DeleteDialog from "@/components/delete-dialog";

type Props = {
  products: Product[] | undefined;
  total: number | undefined;
};

export default function ProductTable({ products, total }: Props) {
  return (
    <>
      {!products ? (
        <div className="m-40">
          <p className="text-center">Загрузка...</p>
        </div>
      ) : (
        <Table>
          <TableCaption>
            Всего записей: {total}. <AddDialog table="products"/>
          </TableCaption>
          <TableHeader>
            <TableHead className="w-[350px]">ИД</TableHead>
            <TableHead className="w-[200px]">Название</TableHead>
            <TableHead>Действия</TableHead>
          </TableHeader>
          <TableBody>
            {products.map((product) => (
              <TableRow key={product.id}>
                <TableCell className="text-sm">{product.id}</TableCell>
                <TableCell>{product.name}</TableCell>
                <TableCell>
                  <PutDialog id={product.id} table="products" />
                  <DeleteDialog id={product.id} table="products"/>
                </TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
      )}
    </>
  );
}

==================================================
File: .\src\components\references\property-type-table.tsx
"use client";

import {
  Table,
  TableBody,
  TableCaption,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { PropertyType } from "@/models/property-type";
import AddDialog from "@/components/references/ref-create-dialog";
import PutDialog from "@/components/references/ref-put-dialog";
import DeleteDialog from "@/components/delete-dialog";

type Props = {
  propertyTypes: PropertyType[] | undefined;
  total: number | undefined;
};

export default function PropertyTypeTable({ propertyTypes, total }: Props) {
  return (
    <>
      {!propertyTypes ? (
        <div className="m-40">
          <p className="text-center">Загрузка...</p>
        </div>
      ) : (
        <Table>
          <TableCaption>
            Всего записей: {total}. <AddDialog table="property-types"/>
          </TableCaption>
          <TableHeader>
            <TableHead className="w-[350px]">ИД</TableHead>
            <TableHead className="w-[200px]">Название</TableHead>
            <TableHead>Действия</TableHead>
          </TableHeader>
          <TableBody>
            {propertyTypes.map((propertyType) => (
              <TableRow key={propertyType.id}>
                <TableCell className="text-sm">{propertyType.id}</TableCell>
                <TableCell>{propertyType.name}</TableCell>
                <TableCell>
                  <PutDialog id={propertyType.id} table="property-types" />
                  <DeleteDialog id={propertyType.id} table="property-types"/>
                </TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
      )}
    </>
  );
}

==================================================
File: .\src\components\references\ref-create-dialog.tsx
"use client";

import { Dialog, DialogContent, DialogTrigger } from "@/components/ui/dialog";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { ErrorAlert } from "@/components/error-alert";
import { SuccessAlert } from "@/components/success-alert";
import { useMutation } from "@tanstack/react-query";
import { useQueryClient } from "@tanstack/react-query";
import { toast } from "sonner";
import axios from "axios";

import { useForm } from "react-hook-form";
import { z } from "zod";
import { zodResolver } from "@hookform/resolvers/zod";

import { refForm } from "@/lib/forms/ref.form";

type Props = {
  table: string;
};

export default function CreateDialog({ table }: Props) {
  const form = useForm<z.infer<typeof refForm>>({
    resolver: zodResolver(refForm),
  });

  const queryClient = useQueryClient();
  const { mutate } = useMutation({
    mutationFn: (data: z.infer<typeof refForm>) =>
      axios.post(`/api/${table}`, data),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: [table] });
      toast(<SuccessAlert successDescription="Успешно добавлен!" />);
    },
    onError: (error) => {
      toast(<ErrorAlert errorDescription={error.toString()} />);
    },
  });

  const onSubmit = async (data: z.infer<typeof refForm>) => {
    await mutate(data);
    form.reset();
  };

  return (
    <Dialog>
      <DialogTrigger asChild>
        <Button variant="link" className="text-green-500">
          Добавить
        </Button>
      </DialogTrigger>
      <DialogContent className="sm:max-w-[425px]">
        <Form {...form}>
          <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-8">
            <FormField
              control={form.control}
              name="name"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Название</FormLabel>
                  <FormControl>
                    <Input placeholder="Введите название" {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <Button type="submit">Добавить</Button>
          </form>
        </Form>
      </DialogContent>
    </Dialog>
  );
}

==================================================
File: .\src\components\references\ref-put-dialog.tsx
"use client";

import { Dialog, DialogContent, DialogTrigger } from "@/components/ui/dialog";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { ErrorAlert } from "@/components/error-alert";
import { SuccessAlert } from "@/components/success-alert";
import { useMutation } from "@tanstack/react-query";
import { useQueryClient } from "@tanstack/react-query";
import { toast } from "sonner";
import axios from "axios";

import { useForm } from "react-hook-form";
import { z } from "zod";
import { zodResolver } from "@hookform/resolvers/zod";

import { refForm } from "@/lib/forms/ref.form";

type Props = {
  id: string;
  table: string;
};

export default function PutDialog({ id, table }: Props) {
  const form = useForm<z.infer<typeof refForm>>({
    resolver: zodResolver(refForm),
  });

  const queryClient = useQueryClient();
  const { mutate } = useMutation({
    mutationFn: (data: z.infer<typeof refForm>) =>
      axios.put(`/api/${table}/${id}`, data),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: [table] });
      toast(<SuccessAlert successDescription="Успешно изменен!" />);
    },
    onError: (error) => {
      toast(<ErrorAlert errorDescription={error.toString()} />);
    },
  });

  const onSubmit = async (data: z.infer<typeof refForm>) => {
    await mutate(data);
    form.reset();
  };

  return (
    <Dialog>
      <DialogTrigger asChild>
        <Button variant="link" className="text-blue-500">
          Изменить
        </Button>
      </DialogTrigger>
      <DialogContent className="sm:max-w-[425px]">
        <Form {...form}>
          <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-8">
            <FormField
              control={form.control}
              name="name"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Название</FormLabel>
                  <FormControl>
                    <Input placeholder="Введите название" {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <Button type="submit">Изменить</Button>
          </form>
        </Form>
      </DialogContent>
    </Dialog>
  );
}

==================================================
File: .\src\components\tables\agencies-stats.tsx
"use client";

import { useAgenciesStats } from "@/hooks/use-agencies-stats";
import { Separator } from "@/components/ui/separator";

type AmountStat = {
  name: string;
  amount: number;
};

export default function AgenciesStats() {
  const { result } = useAgenciesStats();

  return (
    <div className="my-10">
      <div className="">
        <p className="flex flex-row space-x-5 mb-4">
          Запрос с подзапросами с использованием операций над итоговыми данными{" "}
          - выводит агентства с количеством заказов, которое превышает
          среднее количество заказов среди всех агентств.
        </p>
      </div>
      {!result ? (
        <div className="m-40">
          <p className="text-center">Загрузка...</p>
        </div>
      ) : (
        <ul>
          {result.map((item: AmountStat) => (
            <li key={item.name} className="flex flex-col items-center">
              <div className="flex flex-row space-x-5">
                <p>{item.name}</p>
                <p>-</p>
                <p>{item.amount}</p>
              </div>
            </li>
          ))}
        </ul>
      )}
    </div>
  );
}

==================================================
File: .\src\components\tables\agency-products-table.tsx
import {
  Table,
  TableBody,
  TableCaption,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { AgencyProduct } from "@/models/agency-product";
import DeleteDialog from "../delete-dialog";
import AddAgencyProductDialog from "@/components/tables/add/add-agency-product-dialog";
import EditAgencyProductDialog from "@/components/tables/edit/edit-agency-product-dialog";

type Props = {
  agencyProducts: AgencyProduct[] | undefined;
  total: number | undefined;
};

export default function AgencyProductsTable({ agencyProducts, total }: Props) {
  return (
    <>
      {!agencyProducts ? (
        <div className="m-40">
          <p className="text-center">Загрузка...</p>
        </div>
      ) : (
        <Table>
          <TableCaption>Всего записей: {total}. <AddAgencyProductDialog/> 
          </TableCaption>
          <TableHeader>
            <TableHead className="w-[350px]">ИД</TableHead>
            <TableHead>Агенство</TableHead>
            <TableHead>Продукт</TableHead>
            <TableHead>Цена за ед.</TableHead>
            <TableHead>Действия</TableHead>
          </TableHeader>
          <TableBody>
            {agencyProducts.map((agencyProduct: AgencyProduct) => (
              <TableRow key={agencyProduct.id}>
                <TableCell className="text-sm">{agencyProduct.id}</TableCell>
                <TableCell>{agencyProduct.agency.name}</TableCell>
                <TableCell>{agencyProduct.product.name}</TableCell>
                <TableCell>{agencyProduct.price}</TableCell>
                <TableCell>
                  <EditAgencyProductDialog id={agencyProduct.id} agencyProduct={agencyProduct} />
                  <DeleteDialog id={agencyProduct.id} table="agency-products" />
                </TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
      )}
    </>
  );
}

==================================================
File: .\src\components\tables\agency-table.tsx
"use agency";

import {
  Table,
  TableBody,
  TableCaption,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { Agency } from "@/models/agency";
import Link from "next/link";
import DeleteDialog from "@/components/delete-dialog";
import AddAgencyDialog from "@/components/tables/add/add-agency-dialog";

type Props = {
  agencies: Agency[] | undefined;
  total: number | undefined;
};

export default function AgencyTable({ agencies, total }: Props) {
  return (
    <>
      {!agencies ? (
        <div className="m-40">
          <p className="text-center">Загрузка...</p>
        </div>
      ) : (
        <Table>
          <TableCaption>
            Всего записей: {total}. <AddAgencyDialog/>
          </TableCaption>
          <TableHeader>
            <TableHead className="w-[350px]">ИД</TableHead>
            <TableHead className="w-[200px]">Название</TableHead>
            <TableHead>Город</TableHead>
            <TableHead>Тип собственности</TableHead>
            <TableHead>Год создания</TableHead>
            <TableHead>Пл. счет</TableHead>
            <TableHead>Действия</TableHead>
          </TableHeader>
          <TableBody>
            {agencies.map((agency) => (
              <TableRow key={agency.id}>
                <TableCell className="text-sm">
                  <Link href={`/agencies/${agency.id}`}>{agency.id}</Link>
                </TableCell>
                <TableCell>{agency.name}</TableCell>
                <TableCell>{agency.city.name}</TableCell>
                <TableCell>{agency.property.name}</TableCell>
                <TableCell>{agency.year}</TableCell>
                <TableCell>{agency.paymentAccount}</TableCell>
                <TableCell>
                  {/* <UpdateAgencyDialog city={city} /> */}
                  <DeleteDialog id={agency.id} table="agencies" />
                </TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
      )}
    </>
  );
}

==================================================
File: .\src\components\tables\client-stats.tsx
"use client";

import { useClientsStats } from "@/hooks/use-clients-stats";
import { Separator } from "@/components/ui/separator";

type ZeroOrdersClient = {
  name: string;
};

export default function ClientsStats() {
  const { result } = useClientsStats();

  return (
    <div className="my-10">
      <div className="">
        <p className="flex flex-row space-x-5 mb-4">
          Запрос с подзапросами с использованием NOT IN - вывод клиентов, у
          которых нет заказов.
        </p>
      </div>
      {!result ? (
        <div className="m-40">
          <p className="text-center">Загрузка...</p>
        </div>
      ) : (
        <ul>
          {result.map((item: ZeroOrdersClient) => (
            <li key={item.name} className="flex flex-col items-center">
              <div className="flex flex-row space-x-5">
                <p>{item.name}</p>
              </div>
            </li>
          ))}
        </ul>
      )}
    </div>
  );
}

==================================================
File: .\src\components\tables\client-table.tsx
"use client";

import {
  Table,
  TableBody,
  TableCaption,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { Client } from "@/models/client";
import AddClientDialog from "@/components/tables/add/add-client-dialog";
import Link from "next/link";
import DeleteDialog from "@/components/delete-dialog";
import EditClientDialog from "./edit/edit-client-dialog";

type Props = {
  clients: Client[] | undefined;
  total: number | undefined;
};

export default function ClientTable({ clients, total }: Props) {
  return (
    <>
      {!clients ? (
        <div className="m-40">
          <p className="text-center">Загрузка...</p>
        </div>
      ) : (
        <Table>
          <TableCaption>
            Всего записей: {total}. <AddClientDialog />
          </TableCaption>
          <TableHeader>
            <TableHead className="w-[350px]">ИД</TableHead>
            <TableHead className="w-[200px]">Название</TableHead>
            <TableHead>Город</TableHead>
            <TableHead>Адрес</TableHead>
            <TableHead>Телефон</TableHead>
            <TableHead>Заказы</TableHead>
            <TableHead>Действия</TableHead>
          </TableHeader>
          <TableBody>
            {clients.map((client) => (
              <TableRow key={client.id}>
                <TableCell className="text-sm">
                  <Link href={`/clients/${client.id}`}>{client.id}</Link>
                </TableCell>
                <TableCell>{client.name}</TableCell>
                <TableCell>{client.city.name}</TableCell>
                <TableCell>{client.adress}</TableCell>
                <TableCell>{client.phone}</TableCell>
                <TableCell>{client.orders.length}</TableCell>
                <TableCell>
                  <EditClientDialog id={client.id} client={client}/>
                  <DeleteDialog id={client.id} table="clients" />
                </TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
      )}
    </>
  );
}

==================================================
File: .\src\components\tables\order-table.tsx
"use order";

import {
  Table,
  TableBody,
  TableCaption,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { Order } from "@/models/order";
import DeleteDialog from "@/components/delete-dialog";

type Props = {
  orders: Order[] | undefined;
  total: number | undefined;
};

export default function OrderTable({ orders, total }: Props) {
  return (
    <>
      {!orders ? (
        <div className="m-40">
          <p className="text-center">Загрузка...</p>
        </div>
      ) : (
        <Table>
          <TableCaption>Всего записей: {total}.</TableCaption>
          <TableHeader>
            <TableHead className="w-[350px]">ИД</TableHead>
            <TableHead>Клиент</TableHead>
            <TableHead>Агенство</TableHead>
            <TableHead>Продукт</TableHead>
            <TableHead>Количество</TableHead>
            <TableHead>Форма платежа</TableHead>
            <TableHead>Создан</TableHead>
            <TableHead>Завершен</TableHead>
            <TableHead>Действия</TableHead>
          </TableHeader>
          <TableBody>
            {orders.map((order: Order) => (
              <TableRow key={order.id}>
                <TableCell className="text-sm">{order.id}</TableCell>
                <TableCell>{order.client.name}</TableCell>
                <TableCell>{order.agency.name}</TableCell>
                <TableCell>{order.agencyProduct.product.name}</TableCell>
                <TableCell>{order.amount}</TableCell>
                <TableCell>{order.paymentForm.name}</TableCell>
                <TableCell>{String(order.created)}</TableCell>
                <TableCell>{String(order.completed)}</TableCell>
                <TableCell>
                  <DeleteDialog id={order.id} table="orders" />
                </TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
      )}
    </>
  );
}

==================================================
File: .\src\components\tables\orders-stats.tsx
"use client";

import { useOrdersStats } from "@/hooks/use-orders-stats";
import debounce from "lodash.debounce";
import { ChangeEvent, useState } from "react";
import {
  BarChart,
  Bar,
  ResponsiveContainer,
  Tooltip,
  XAxis,
  YAxis,
  TooltipProps,
} from "recharts";
import { Input } from "../ui/input";

interface ClientAmount {
  name: string;
  amount: number;
  order_volume: string;
}

const CustomTooltip = ({ active, payload }: TooltipProps<any, any>) => {
  if (active && payload && payload.length) {
    const data: ClientAmount = payload[0].payload;

    return (
      <div style={{ backgroundColor: '#fff', border: '1px solid #ccc', padding: '10px' }}>
        <p><strong>Name:</strong> {data.name}</p>
        <p><strong>Amount:</strong> {data.amount}</p>
        <p><strong>Order Volume:</strong> {data.order_volume}</p>
      </div>
    );
  }

  return null;
};

export default function OrderChart() {
  const [amount, setAmount] = useState(0);
  const { result } = useOrdersStats(amount);

  const search = (event: ChangeEvent<HTMLInputElement>) => {
    setAmount(Number(event.target.value));
  };
  const debouncedChange = debounce(search, 300);

  return (
    <div className="h-72 my-10">
      <div className="">
        <p className="flex flex-row space-x-5 mb-4">
          Запрос с подзапросами с использованием CASE - выводит 
          сумму заказов по каждому агентству с пометкой, превышает ли эта сумма
          {" "}
          <Input
            name="searchQuery"
            className="w-16  mx-2"
            placeholder="..."
            onChange={debouncedChange}
          />
          шт.
        </p>
      </div>

      {result === undefined ? (
        <div className="m-40">
          <p className="text-center">Загрузка...</p>
        </div>
      ) : (
        <ResponsiveContainer width={"90%"} height={"100%"}>
          <BarChart data={result} width={150} height={40}>
            <Tooltip content={<CustomTooltip />}/>
            <XAxis dataKey="name" />
            <YAxis />
            <Bar dataKey="amount" barSize={20} fill="#8884d8" />
          </BarChart>
        </ResponsiveContainer>
      )}
    </div>
  );
}

==================================================
File: .\src\components\tables\user-table.tsx
"use client";

import {
  Table,
  TableBody,
  TableCaption,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { User } from "@/models/user";
import AddUserDialog from "@/components/tables/add/add-user-dialog";
import Link from "next/link";
import DeleteDialog from "@/components/delete-dialog";
import EditUserDialog from "@/components/tables/edit/edit-user-dialog";

type Props = {
  users: User[] | undefined;
  total: number | undefined;
};

export default function UserTable({ users, total }: Props) {
  return (
    <>
      {!users ? (
        <div className="m-40">
          <p className="text-center">Загрузка...</p>
        </div>
      ) : (
        <Table>
          <TableCaption>
            Всего записей: {total}. <AddUserDialog />
          </TableCaption>
          <TableHeader>
            <TableHead className="w-[350px]">ИД</TableHead>
            <TableHead>Логин</TableHead>
            <TableHead>Роль</TableHead>
            <TableHead>Агенство</TableHead>
          </TableHeader>
          <TableBody>
            {users.map((user) => (
              <TableRow key={user.id}>
                <TableCell className="text-sm">
                  <Link href={`/users/${user.id}`}>{user.id}</Link>
                </TableCell>
                <TableCell>{user.login}</TableCell>
                <TableCell>{user.role}</TableCell>
                <TableCell>{user.agencies.name}</TableCell>
                <TableCell>
                  <EditUserDialog id={user.id} user={user} />
                  <DeleteDialog id={user.id} table="users" />
                </TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
      )}
    </>
  );
}

==================================================
File: .\src\components\tables\add\add-agency-dialog.tsx
"use client";

import { Dialog, DialogContent, DialogTrigger } from "@/components/ui/dialog";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import {
  Form,
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { ErrorAlert } from "@/components/error-alert";
import { SuccessAlert } from "@/components/success-alert";
import { useMutation } from "@tanstack/react-query";
import { useQueryClient } from "@tanstack/react-query";
import { useQuery } from "@tanstack/react-query";
import { toast } from "sonner";
import axios from "axios";

import { useForm } from "react-hook-form";
import { z } from "zod";
import { zodResolver } from "@hookform/resolvers/zod";

import { agencyForm } from "@/lib/forms/agency.form";
import { City } from "@/models/city";
import { PropertyType } from "@/models/property-type";

export default function AddAgencyDialog() {
  const getCity = () => {
    const { data } = useQuery({
      queryKey: ["cities"],
      queryFn: () => axios.get(`/api/cities`),
      select: (data) => data.data,
    });
    return data;
  };

  const cities = getCity();

  const getPropertyType = () => {
    const { data } = useQuery({
      queryKey: ["property-types"],
      queryFn: () => axios.get(`/api/property-types`),
      select: (data) => data.data,
    });
    return data;
  };

  const propertyTypes = getPropertyType();

  const form = useForm<z.infer<typeof agencyForm>>({
    resolver: zodResolver(agencyForm),
  });

  const queryClient = useQueryClient();
  const { mutate } = useMutation({
    mutationFn: (data: z.infer<typeof agencyForm>) =>
      axios.post("/api/agencies", data),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["agencies"] });
      toast(<SuccessAlert successDescription="Успешно добавлен!" />);
    },
    onError: (error) => {
      toast(<ErrorAlert errorDescription={error.toString()} />);
    },
  });

  const onSubmit = async (data: z.infer<typeof agencyForm>) => {
    await mutate(data);
    form.reset();
  };

  return (
    <Dialog>
      <DialogTrigger asChild>
        <Button variant="link" className="text-green-500">
          Добавить
        </Button>
      </DialogTrigger>
      <DialogContent className="sm:max-w-[425px]">
        <Form {...form}>
          <form onSubmit={form.handleSubmit(onSubmit, console.log)} className="space-y-8">
            <FormField
              control={form.control}
              name="name"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Название</FormLabel>
                  <FormControl>
                    <Input placeholder="Введите название" {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="cityId"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Город</FormLabel>
                  <Select
                    onValueChange={field.onChange}
                    defaultValue={field.value}
                  >
                    <FormControl>
                      <SelectTrigger>
                        <SelectValue placeholder="Выберите город" />
                      </SelectTrigger>
                    </FormControl>
                    <SelectContent>
                      {cities ? (
                        cities?.cities.map((city: City) => (
                          <SelectItem key={city.id} value={city.id}>
                            {city.name}
                          </SelectItem>
                        ))
                      ) : (
                        <SelectItem value="Null">Загрузка...</SelectItem>
                      )}
                    </SelectContent>
                  </Select>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="propertyTypeId"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Тип собственности</FormLabel>
                  <Select
                    onValueChange={field.onChange}
                    defaultValue={field.value}
                  >
                    <FormControl>
                      <SelectTrigger>
                        <SelectValue placeholder="Выберите тип собственности" />
                      </SelectTrigger>
                    </FormControl>
                    <SelectContent>
                      {propertyTypes ? (
                        propertyTypes?.propertyTypes.map((property: PropertyType) => (
                          <SelectItem key={property.id} value={property.id}>
                            {property.name}
                          </SelectItem>
                        ))
                      ) : (
                        <SelectItem value="Null">Загрузка...</SelectItem>
                      )}
                    </SelectContent>
                  </Select>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="year"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Год</FormLabel>
                  <FormControl>
                    <Input placeholder="Введите год" {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="paymentAccount"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Счет</FormLabel>
                  <FormControl>
                    <Input placeholder="Введите счет" {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <Button type="submit">Добавить</Button>
          </form>
        </Form>
      </DialogContent>
    </Dialog>
  );
}

==================================================
File: .\src\components\tables\add\add-agency-product-dialog.tsx
"use client";

import { Dialog, DialogContent, DialogTrigger } from "@/components/ui/dialog";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import {
  Form,
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { ErrorAlert } from "@/components/error-alert";
import { SuccessAlert } from "@/components/success-alert";
import { useMutation } from "@tanstack/react-query";
import { useQueryClient } from "@tanstack/react-query";
import { useQuery } from "@tanstack/react-query";
import { toast } from "sonner";
import axios from "axios";

import { useForm } from "react-hook-form";
import { z } from "zod";
import { zodResolver } from "@hookform/resolvers/zod";

import { agencyProductForm } from "@/lib/forms/agency-product.form";
import { Agency } from "@/models/agency";
import { Product } from "@/models/product";

export default function AddAgencyProductDialog() {
  const getAgencies = () => {
    const { data } = useQuery({
      queryKey: ["agencies"],
      queryFn: () => axios.get(`/api/agencies`),
      select: (data) => data.data,
    });
    return data;
  };

  const agencies = getAgencies();

  const getProducts = () => {
    const { data } = useQuery({
      queryKey: ["products"],
      queryFn: () => axios.get(`/api/products`),
      select: (data) => data.data,
    });
    return data;
  };

  const products = getProducts();

  const form = useForm<z.infer<typeof agencyProductForm>>({
    resolver: zodResolver(agencyProductForm),
  });

  const queryClient = useQueryClient();
  const { mutate } = useMutation({
    mutationFn: (data: z.infer<typeof agencyProductForm>) =>
      axios.post("/api/agency-products", data),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["agency-products"] });
      toast(<SuccessAlert successDescription="Успешно добавлен!" />);
    },
    onError: (error) => {
      toast(<ErrorAlert errorDescription={error.toString()} />);
    },
  });

  const onSubmit = async (data: z.infer<typeof agencyProductForm>) => {
    await mutate(data);
    form.reset();
  };

  return (
    <Dialog>
      <DialogTrigger asChild>
        <Button variant="link" className="text-green-500">
          Добавить
        </Button>
      </DialogTrigger>
      <DialogContent className="sm:max-w-[425px]">
        <Form {...form}>
          <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-8">
            <FormField
              control={form.control}
              name="agencyId"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Агенство</FormLabel>
                  <Select
                    onValueChange={field.onChange}
                    defaultValue={field.value}
                  >
                    <FormControl>
                      <SelectTrigger>
                        <SelectValue placeholder="Выберите агенство" />
                      </SelectTrigger>
                    </FormControl>
                    <SelectContent>
                      {agencies ? (
                        agencies?.agencies.map((agency: Agency) => (
                          <SelectItem key={agency.id} value={agency.id}>
                            {agency.name}
                          </SelectItem>
                        ))
                      ) : (
                        <SelectItem value="Null">Загрузка...</SelectItem>
                      )}
                    </SelectContent>
                  </Select>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="productId"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Продукция</FormLabel>
                  <Select
                    onValueChange={field.onChange}
                    defaultValue={field.value}
                  >
                    <FormControl>
                      <SelectTrigger>
                        <SelectValue placeholder="Выберите продукцию" />
                      </SelectTrigger>
                    </FormControl>
                    <SelectContent>
                      {products ? (
                        products?.products.map((product: Product) => (
                          <SelectItem key={product.id} value={product.id}>
                            {product.name}
                          </SelectItem>
                        ))
                      ) : (
                        <SelectItem value="Null">Загрузка...</SelectItem>
                      )}
                    </SelectContent>
                  </Select>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="price"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Цена</FormLabel>
                  <FormControl>
                    <Input type="number" placeholder="Введите цену" {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <Button type="submit">Добавить</Button>
          </form>
        </Form>
      </DialogContent>
    </Dialog>
  );
}

==================================================
File: .\src\components\tables\add\add-client-dialog.tsx
"use client";

import {
  Dialog,
  DialogContent,
  DialogTrigger,
} from "@/components/ui/dialog";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import {
  Form,
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { ErrorAlert } from "@/components/error-alert";
import { SuccessAlert } from "@/components/success-alert";
import { useMutation } from "@tanstack/react-query";
import { useQueryClient } from "@tanstack/react-query";
import { useQuery } from "@tanstack/react-query";
import { toast } from "sonner";
import axios from "axios";

import { useForm } from "react-hook-form";
import { z } from "zod";
import { zodResolver } from "@hookform/resolvers/zod";

import { createClientForm } from "@/lib/forms/client.form";
import { City } from "@/models/city";

export default function AddClientDialog() {
  const { data, isLoading, isSuccess, isError } = useQuery({
    queryKey: ["cities"],
    queryFn: () => axios.get(`/api/cities`),
    select: (data) => data.data,
  });
 
  const form = useForm<z.infer<typeof createClientForm>>({
    resolver: zodResolver(createClientForm)
  });

  const queryClient = useQueryClient();
  const { mutate } = useMutation({
    mutationFn: (data: z.infer<typeof createClientForm>) => axios.post("/api/clients", data),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["clients"] });
      toast(<SuccessAlert successDescription="Клиент успешно добавлен!" />);
    },
    onError: (error) => {
      toast(<ErrorAlert errorDescription={error.toString()} />);
    },
  });

  const onSubmit = async (data: z.infer<typeof createClientForm>) => {
    await mutate(data);
    form.reset();
  };

  return (
    <Dialog>
      <DialogTrigger asChild>
        <Button variant="link" className="text-green-500">
          Добавить
        </Button>
      </DialogTrigger>
      <DialogContent className="sm:max-w-[425px]">
        <Form {...form}>
          <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-8">
            <FormField
              control={form.control}
              name="name"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Название</FormLabel>
                  <FormControl>
                    <Input placeholder="Введите название" {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="cityId"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Город</FormLabel>
                  <Select
                    onValueChange={field.onChange}
                    defaultValue={field.value}
                  >
                    <FormControl>
                      <SelectTrigger>
                        <SelectValue placeholder="Выберите город" />
                      </SelectTrigger>
                    </FormControl>
                    <SelectContent>
                      {data ? (
                        data?.cities.map((city: City) => (
                          <SelectItem key={city.id} value={city.id}>
                            {city.name}
                          </SelectItem>
                        ))
                      ) : (
                        <SelectItem value="Null">Загрузка...</SelectItem>
                      )}
                    </SelectContent>
                  </Select>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="adress"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Адрес</FormLabel>
                  <FormControl>
                    <Input placeholder="Введите адрес" {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="phone"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Номер телефона</FormLabel>
                  <FormControl>
                    <Input placeholder="Введите номер телефона" {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <Button type="submit">Добавить</Button>
          </form>
        </Form>
      </DialogContent>
    </Dialog>
  );
}

==================================================
File: .\src\components\tables\add\add-order-form.tsx
"use client";

import { Dialog, DialogContent, DialogTrigger } from "@/components/ui/dialog";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { ErrorAlert } from "@/components/error-alert";
import { SuccessAlert } from "@/components/success-alert";
import { useMutation } from "@tanstack/react-query";
import { useQueryClient } from "@tanstack/react-query";
import { useQuery } from "@tanstack/react-query";
import { toast } from "sonner";
import axios from "axios";

import { useForm } from "react-hook-form";
import { z } from "zod";
import { zodResolver } from "@hookform/resolvers/zod";

import { City } from "@/models/city";
import { createOrderForm } from "@/lib/forms/create-order.form";
import { Client } from "@/models/client";
import { Agency } from "@/models/agency";
import { AgencyProduct } from "@/models/agency-product";

export default function AddOrderDialog() {
  const getClients = () => {
    const { data } = useQuery({
      queryKey: ["clients"],
      queryFn: () => axios.get(`/api/clients`),
      select: (data) => data.data,
    });
    return data;
  };

  const clients = getClients();

  const getAgencies = () => {
    const { data } = useQuery({
      queryKey: ["agencies"],
      queryFn: () => axios.get(`/api/agencies`),
      select: (data) => data.data,
    });
    return data;
  };

  const agencies = getAgencies();

  const getAgencyProducts = () => {
    const { data } = useQuery({
      queryKey: ["agency-products"],
      queryFn: () => axios.get(`/api/agency-products`),
      select: (data) => data.data,
    });
    return data;
  };

  const agencyProducts = getAgencyProducts();

  const getPaymentForms = () => {
    const { data } = useQuery({
      queryKey: ["payment-forms"],
      queryFn: () => axios.get(`/api/payment-forms`),
      select: (data) => data.data,
    });
    return data;
  };

  const paymentForms = getPaymentForms();

  const form = useForm<z.infer<typeof createOrderForm>>({
    resolver: zodResolver(createOrderForm),
  });

  const queryClient = useQueryClient();
  const { mutate } = useMutation({
    mutationFn: (data: z.infer<typeof createOrderForm>) =>
      axios.post("/api/orders", data),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["orders"] });
      toast(<SuccessAlert successDescription="Успешно добавлен!" />);
    },
    onError: (error) => {
      toast(<ErrorAlert errorDescription={error.toString()} />);
    },
  });

  const onSubmit = async (data: z.infer<typeof createOrderForm>) => {
    await mutate(data);
    form.reset();
  };

  return (
    <Dialog>
      <DialogTrigger asChild>
        <Button variant="link" className="text-green-500">
          Добавить
        </Button>
      </DialogTrigger>
      <DialogContent className="sm:max-w-[425px]">
        <Form {...form}>
          <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-8">
            <FormField
              control={form.control}
              name="clientId"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Клиент</FormLabel>
                  <Select
                    onValueChange={field.onChange}
                    defaultValue={field.value}
                  >
                    <FormControl>
                      <SelectTrigger>
                        <SelectValue placeholder="Выберите клиента" />
                      </SelectTrigger>
                    </FormControl>
                    <SelectContent>
                      {clients ? (
                        clients?.clients.map((client: Client) => (
                          <SelectItem key={client.id} value={client.id}>
                            {client.name}
                          </SelectItem>
                        ))
                      ) : (
                        <SelectItem value="Null">Загрузка...</SelectItem>
                      )}
                    </SelectContent>
                  </Select>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="agencyId"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Агенство</FormLabel>
                  <Select
                    onValueChange={field.onChange}
                    defaultValue={field.value}
                  >
                    <FormControl>
                      <SelectTrigger>
                        <SelectValue placeholder="Выберите агенство" />
                      </SelectTrigger>
                    </FormControl>
                    <SelectContent>
                      {agencies ? (
                        agencies?.agencies.map((agency: Agency) => (
                          <SelectItem key={agency.id} value={agency.id}>
                            {agency.name}
                          </SelectItem>
                        ))
                      ) : (
                        <SelectItem value="Null">Загрузка...</SelectItem>
                      )}
                    </SelectContent>
                  </Select>
                  <FormMessage />
                </FormItem>
              )}
            />
            {
              /// TODO: Продукт должен выбираться из продуктов агенста, выбраного ранее
            }
            <FormField
              control={form.control}
              name="agencyProductId"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Продукт агенства</FormLabel>
                  <Select
                    onValueChange={field.onChange}
                    defaultValue={field.value}
                  >
                    <FormControl>
                      <SelectTrigger>
                        <SelectValue placeholder="Выберите продукт" />
                      </SelectTrigger>
                    </FormControl>
                    <SelectContent>
                      {agencyProducts ? (
                        agencyProducts?.agencyProducts.map(
                          (agencyProduct: AgencyProduct) => (
                            <SelectItem
                              key={agencyProduct.id}
                              value={agencyProduct.id}
                            >
                              {agencyProduct.product.name} -{" "}
                              {agencyProduct.price}
                            </SelectItem>
                          )
                        )
                      ) : (
                        <SelectItem value="Null">Загрузка...</SelectItem>
                      )}
                    </SelectContent>
                  </Select>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="amount"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Кол-во</FormLabel>
                  <FormControl>
                    <Input placeholder="Введите кол-во" {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <Button type="submit">Добавить</Button>
          </form>
        </Form>
      </DialogContent>
    </Dialog>
  );
}

==================================================
File: .\src\components\tables\add\add-user-dialog.tsx
"use client";

import { Dialog, DialogContent, DialogTrigger } from "@/components/ui/dialog";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import {
  Form,
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { ErrorAlert } from "@/components/error-alert";
import { SuccessAlert } from "@/components/success-alert";
import { useMutation } from "@tanstack/react-query";
import { useQueryClient } from "@tanstack/react-query";
import { useQuery } from "@tanstack/react-query";
import { toast } from "sonner";
import axios from "axios";

import { useForm } from "react-hook-form";
import { z } from "zod";
import { zodResolver } from "@hookform/resolvers/zod";

import { userForm } from "@/lib/forms/user.form";
import { Agency } from "@/models/agency";

export default function AddUserDialog() {
  const { data } = useQuery({
    queryKey: ["agencies"],
    queryFn: () => axios.get(`/api/agencies`),
    select: (data) => data.data,
  });

  const form = useForm<z.infer<typeof userForm>>({
    resolver: zodResolver(userForm),
  });

  const queryClient = useQueryClient();
  const { mutate } = useMutation({
    mutationFn: (data: z.infer<typeof userForm>) =>
      axios.post("/api/users", data),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["users"] });
      toast(<SuccessAlert successDescription="Успешно добавлен!" />);
    },
    onError: (error) => {
      toast(<ErrorAlert errorDescription={error.toString()} />);
    },
  });

  const onSubmit = async (data: z.infer<typeof userForm>) => {
    await mutate(data);
    form.reset();
  };

  return (
    <Dialog>
      <DialogTrigger asChild>
        <Button variant="link" className="text-green-500">
          Добавить
        </Button>
      </DialogTrigger>
      <DialogContent className="sm:max-w-[425px]">
        <Form {...form}>
          <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-8">
            <FormField
              control={form.control}
              name="login"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Логин</FormLabel>
                  <FormControl>
                    <Input placeholder="Введите логин" {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="password"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Пароль</FormLabel>
                  <FormControl>
                    <Input placeholder="Введите пароль" {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="agencyId"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Агенство</FormLabel>
                  <Select
                    onValueChange={field.onChange}
                    defaultValue={field.value}
                  >
                    <FormControl>
                      <SelectTrigger>
                        <SelectValue placeholder="Выберите агенство" />
                      </SelectTrigger>
                    </FormControl>
                    <SelectContent>
                      {data ? (
                        data?.agencies.map((agency: Agency) => (
                          <SelectItem key={agency.id} value={agency.id}>
                            {agency.name}
                          </SelectItem>
                        ))
                      ) : (
                        <SelectItem value="Null">Загрузка...</SelectItem>
                      )}
                    </SelectContent>
                  </Select>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="role"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Роль</FormLabel>
                  <Select
                    onValueChange={field.onChange}
                    defaultValue={field.value}
                  >
                    <FormControl>
                      <SelectTrigger>
                        <SelectValue placeholder="Выберите роль" />
                      </SelectTrigger>
                    </FormControl>
                    <SelectContent>
                      <SelectItem value="ADMIN">Администратор</SelectItem>
                      <SelectItem value="AGENCY_MANAGER">Менеджер агенства</SelectItem>
                      <SelectItem value="AGENCY_OWNER">Владелец агенства</SelectItem>
                      <SelectItem value="CLIENT">Клиент</SelectItem>
                    </SelectContent>
                  </Select>
                  <FormMessage />
                </FormItem>
              )}
            />
            <Button type="submit">Добавить</Button>
          </form>
        </Form>
      </DialogContent>
    </Dialog>
  );
}

==================================================
File: .\src\components\tables\edit\edit-agency-product-dialog.tsx
"use client";

import { Dialog, DialogContent, DialogTrigger } from "@/components/ui/dialog";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import {
  Form,
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { ErrorAlert } from "@/components/error-alert";
import { SuccessAlert } from "@/components/success-alert";
import { useMutation } from "@tanstack/react-query";
import { useQueryClient } from "@tanstack/react-query";
import { useQuery } from "@tanstack/react-query";
import { toast } from "sonner";
import axios from "axios";

import { useForm } from "react-hook-form";
import { z } from "zod";
import { zodResolver } from "@hookform/resolvers/zod";

import { agencyProductForm } from "@/lib/forms/agency-product.form";
import { Agency } from "@/models/agency";
import { Product } from "@/models/product";
import { AgencyProduct } from "@/models/agency-product";

type Props = {
  id: string;
  agencyProduct: AgencyProduct;
};

export default function EditAgencyProductDialog({id, agencyProduct} : Props) {
  const getAgencies = () => {
    const { data } = useQuery({
      queryKey: ["agencies"],
      queryFn: () => axios.get(`/api/agencies`),
      select: (data) => data.data,
    });
    return data;
  };

  const agencies = getAgencies();

  const getProducts = () => {
    const { data } = useQuery({
      queryKey: ["products"],
      queryFn: () => axios.get(`/api/products`),
      select: (data) => data.data,
    });
    return data;
  };

  const products = getProducts();

  const form = useForm<z.infer<typeof agencyProductForm>>({
    resolver: zodResolver(agencyProductForm),
    defaultValues: {
      agencyId: agencyProduct.agency.id,
      productId: agencyProduct.product.id,
      price: agencyProduct.price,
    }
  });

  const queryClient = useQueryClient();
  const { mutate } = useMutation({
    mutationFn: (data: z.infer<typeof agencyProductForm>) =>
      axios.put(`/api/agency-products/${id}`, data),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["agency-products"] });
      toast(<SuccessAlert successDescription="Успешно изменен!" />);
    },
    onError: (error) => {
      toast(<ErrorAlert errorDescription={error.toString()} />);
    },
  });

  const onSubmit = async (data: z.infer<typeof agencyProductForm>) => {
    await mutate(data);
  };

  return (
    <Dialog>
      <DialogTrigger asChild>
        <Button variant="link" className="text-blue-500">
          Изменить
        </Button>
      </DialogTrigger>
      <DialogContent className="sm:max-w-[425px]">
        <Form {...form}>
          <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-8">
            <FormField
              control={form.control}
              name="agencyId"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Агенство</FormLabel>
                  <Select
                    onValueChange={field.onChange}
                    defaultValue={field.value}
                  >
                    <FormControl>
                      <SelectTrigger>
                        <SelectValue placeholder="Выберите агенство" />
                      </SelectTrigger>
                    </FormControl>
                    <SelectContent>
                      {agencies ? (
                        agencies?.agencies.map((agency: Agency) => (
                          <SelectItem key={agency.id} value={agency.id}>
                            {agency.name}
                          </SelectItem>
                        ))
                      ) : (
                        <SelectItem value="Null">Загрузка...</SelectItem>
                      )}
                    </SelectContent>
                  </Select>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="productId"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Продукция</FormLabel>
                  <Select
                    onValueChange={field.onChange}
                    defaultValue={field.value}
                  >
                    <FormControl>
                      <SelectTrigger>
                        <SelectValue placeholder="Выберите продукцию" />
                      </SelectTrigger>
                    </FormControl>
                    <SelectContent>
                      {products ? (
                        products?.products.map((product: Product) => (
                          <SelectItem key={product.id} value={product.id}>
                            {product.name}
                          </SelectItem>
                        ))
                      ) : (
                        <SelectItem value="Null">Загрузка...</SelectItem>
                      )}
                    </SelectContent>
                  </Select>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="price"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Цена</FormLabel>
                  <FormControl>
                    <Input
                      type="number"
                      placeholder="Введите цену"
                      {...field}
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <Button type="submit">Изменить</Button>
          </form>
        </Form>
      </DialogContent>
    </Dialog>
  );
}

==================================================
File: .\src\components\tables\edit\edit-client-dialog.tsx
"use client";

import {
  Dialog,
  DialogContent,
  DialogTrigger,
} from "@/components/ui/dialog";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import {
  Form,
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { ErrorAlert } from "@/components/error-alert";
import { SuccessAlert } from "@/components/success-alert";
import { useMutation } from "@tanstack/react-query";
import { useQueryClient } from "@tanstack/react-query";
import { useQuery } from "@tanstack/react-query";
import { toast } from "sonner";
import axios from "axios";

import { useForm } from "react-hook-form";
import { z } from "zod";
import { zodResolver } from "@hookform/resolvers/zod";

import { createClientForm } from "@/lib/forms/client.form";
import { City } from "@/models/city";
import { Client } from "@/models/client";

type Props = {
  id: string;
  client: Client;
}

export default function EditClientDialog({id, client}: Props) {
  const { data } = useQuery({
    queryKey: ["cities"],
    queryFn: () => axios.get(`/api/cities`),
    select: (data) => data.data,
  });
 
  const form = useForm<z.infer<typeof createClientForm>>({
    resolver: zodResolver(createClientForm),
    defaultValues: {
      name: client.name,
      cityId: client.city.id,
      adress: client.adress,
      phone: client.phone,
    }
  });

  const queryClient = useQueryClient();
  const { mutate } = useMutation({
    mutationFn: (data: z.infer<typeof createClientForm>) => axios.put(`/api/clients/${id}`, data),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["clients"] });
      toast(<SuccessAlert successDescription="Успешно измекнен!" />);
    },
    onError: (error) => {
      toast(<ErrorAlert errorDescription={error.toString()} />);
    },
  });

  const onSubmit = async (data: z.infer<typeof createClientForm>) => {
    await mutate(data);
    form.reset();
  };

  return (
    <Dialog>
      <DialogTrigger asChild>
        <Button variant="link" className="text-blue-500">
          Изменить
        </Button>
      </DialogTrigger>
      <DialogContent className="sm:max-w-[425px]">
        <Form {...form}>
          <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-8">
            <FormField
              control={form.control}
              name="name"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Название</FormLabel>
                  <FormControl>
                    <Input placeholder="Введите название" {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="cityId"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Город</FormLabel>
                  <Select
                    onValueChange={field.onChange}
                    defaultValue={field.value}
                  >
                    <FormControl>
                      <SelectTrigger>
                        <SelectValue placeholder="Выберите город" />
                      </SelectTrigger>
                    </FormControl>
                    <SelectContent>
                      {data ? (
                        data?.cities.map((city: City) => (
                          <SelectItem key={city.id} value={city.id}>
                            {city.name}
                          </SelectItem>
                        ))
                      ) : (
                        <SelectItem value="Null">Загрузка...</SelectItem>
                      )}
                    </SelectContent>
                  </Select>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="adress"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Адрес</FormLabel>
                  <FormControl>
                    <Input placeholder="Введите адрес" {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="phone"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Номер телефона</FormLabel>
                  <FormControl>
                    <Input placeholder="Введите номер телефона" {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <Button type="submit">Изменить</Button>
          </form>
        </Form>
      </DialogContent>
    </Dialog>
  );
}

==================================================
File: .\src\components\tables\edit\edit-user-dialog.tsx
"use client";

import { Dialog, DialogContent, DialogTrigger } from "@/components/ui/dialog";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import {
  Form,
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { ErrorAlert } from "@/components/error-alert";
import { SuccessAlert } from "@/components/success-alert";
import { useMutation } from "@tanstack/react-query";
import { useQueryClient } from "@tanstack/react-query";
import { useQuery } from "@tanstack/react-query";
import { toast } from "sonner";
import axios from "axios";

import { useForm } from "react-hook-form";
import { z } from "zod";
import { zodResolver } from "@hookform/resolvers/zod";

import { userForm } from "@/lib/forms/user.form";
import { Agency } from "@/models/agency";
import { User } from "@/models/user";

type Props = {
  id: string;
  user: User;
};

export default function EditUserDialog({ id, user }: Props) {
  const { data } = useQuery({
    queryKey: ["agencies"],
    queryFn: () => axios.get(`/api/agencies`),
    select: (data) => data.data,
  });

  const form = useForm<z.infer<typeof userForm>>({
    resolver: zodResolver(userForm),
    defaultValues: {
      login: user.login,
      password: user.password,
      agencyId: user.agencies.id,
      role: user.role,
    },
  });

  const queryClient = useQueryClient();
  const { mutate } = useMutation({
    mutationFn: (data: z.infer<typeof userForm>) =>
      axios.put(`/api/users/${id}`, data),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["users"] });
      toast(<SuccessAlert successDescription="Успешно изменен!" />);
    },
    onError: (error) => {
      toast(<ErrorAlert errorDescription={error.toString()} />);
    },
  });

  const onSubmit = async (data: z.infer<typeof userForm>) => {
    await mutate(data);
    form.reset();
  };

  return (
    <Dialog>
      <DialogTrigger asChild>
        <Button variant="link" className="text-blue-500">
          Изменить
        </Button>
      </DialogTrigger>
      <DialogContent className="sm:max-w-[425px]">
        <Form {...form}>
          <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-8">
            <FormField
              control={form.control}
              name="login"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Логин</FormLabel>
                  <FormControl>
                    <Input placeholder="Введите логин" {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="password"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Пароль</FormLabel>
                  <FormControl>
                    <Input placeholder="Введите пароль" {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="agencyId"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Агенство</FormLabel>
                  <Select
                    onValueChange={field.onChange}
                    defaultValue={field.value}
                  >
                    <FormControl>
                      <SelectTrigger>
                        <SelectValue placeholder="Выберите агенство" />
                      </SelectTrigger>
                    </FormControl>
                    <SelectContent>
                      {data ? (
                        data?.agencies.map((agency: Agency) => (
                          <SelectItem key={agency.id} value={agency.id}>
                            {agency.name}
                          </SelectItem>
                        ))
                      ) : (
                        <SelectItem value="Null">Загрузка...</SelectItem>
                      )}
                    </SelectContent>
                  </Select>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="role"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Роль</FormLabel>
                  <Select
                    onValueChange={field.onChange}
                    defaultValue={field.value}
                  >
                    <FormControl>
                      <SelectTrigger>
                        <SelectValue placeholder={user.agencies.name} />
                      </SelectTrigger>
                    </FormControl>
                    <SelectContent>
                      <SelectItem value="ADMIN">Администратор</SelectItem>
                      <SelectItem value="AGENCY_MANAGER">
                        Менеджер агенства
                      </SelectItem>
                      <SelectItem value="AGENCY_OWNER">
                        Владелец агенства
                      </SelectItem>
                      <SelectItem value="CLIENT">Клиент</SelectItem>
                    </SelectContent>
                  </Select>
                  <FormMessage />
                </FormItem>
              )}
            />
            <Button type="submit">Изменить</Button>
          </form>
        </Form>
      </DialogContent>
    </Dialog>
  );
}

==================================================
File: .\src\components\ui\alert-dialog.tsx
"use client"

import * as React from "react"
import * as AlertDialogPrimitive from "@radix-ui/react-alert-dialog"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"

const AlertDialog = AlertDialogPrimitive.Root

const AlertDialogTrigger = AlertDialogPrimitive.Trigger

const AlertDialogPortal = AlertDialogPrimitive.Portal

const AlertDialogOverlay = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
AlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName

const AlertDialogContent = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>
>(({ className, ...props }, ref) => (
  <AlertDialogPortal>
    <AlertDialogOverlay />
    <AlertDialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    />
  </AlertDialogPortal>
))
AlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName

const AlertDialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
AlertDialogHeader.displayName = "AlertDialogHeader"

const AlertDialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
AlertDialogFooter.displayName = "AlertDialogFooter"

const AlertDialogTitle = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold", className)}
    {...props}
  />
))
AlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName

const AlertDialogDescription = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
AlertDialogDescription.displayName =
  AlertDialogPrimitive.Description.displayName

const AlertDialogAction = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Action>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Action
    ref={ref}
    className={cn(buttonVariants(), className)}
    {...props}
  />
))
AlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName

const AlertDialogCancel = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Cancel
    ref={ref}
    className={cn(
      buttonVariants({ variant: "outline" }),
      "mt-2 sm:mt-0",
      className
    )}
    {...props}
  />
))
AlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName

export {
  AlertDialog,
  AlertDialogPortal,
  AlertDialogOverlay,
  AlertDialogTrigger,
  AlertDialogContent,
  AlertDialogHeader,
  AlertDialogFooter,
  AlertDialogTitle,
  AlertDialogDescription,
  AlertDialogAction,
  AlertDialogCancel,
}

==================================================
File: .\src\components\ui\alert.tsx
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const alertVariants = cva(
  "relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground",
  {
    variants: {
      variant: {
        default: "bg-background text-foreground",
        destructive:
          "border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Alert = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>
>(({ className, variant, ...props }, ref) => (
  <div
    ref={ref}
    role="alert"
    className={cn(alertVariants({ variant }), className)}
    {...props}
  />
))
Alert.displayName = "Alert"

const AlertTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h5
    ref={ref}
    className={cn("mb-1 font-medium leading-none tracking-tight", className)}
    {...props}
  />
))
AlertTitle.displayName = "AlertTitle"

const AlertDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm [&_p]:leading-relaxed", className)}
    {...props}
  />
))
AlertDescription.displayName = "AlertDescription"

export { Alert, AlertTitle, AlertDescription }

==================================================
File: .\src\components\ui\button.tsx
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline:
          "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }

==================================================
File: .\src\components\ui\card.tsx
import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-lg border bg-card text-card-foreground shadow-sm",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h3
    ref={ref}
    className={cn(
      "text-2xl font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <p
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }

==================================================
File: .\src\components\ui\dialog.tsx
"use client"

import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Dialog = DialogPrimitive.Root

const DialogTrigger = DialogPrimitive.Trigger

const DialogPortal = DialogPrimitive.Portal

const DialogClose = DialogPrimitive.Close

const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
  />
))
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    >
      {children}
      <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
))
DialogContent.displayName = DialogPrimitive.Content.displayName

const DialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-1.5 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
DialogHeader.displayName = "DialogHeader"

const DialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
DialogFooter.displayName = "DialogFooter"

const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DialogTitle.displayName = DialogPrimitive.Title.displayName

const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DialogDescription.displayName = DialogPrimitive.Description.displayName

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogClose,
  DialogTrigger,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
}

==================================================
File: .\src\components\ui\form.tsx
"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { Slot } from "@radix-ui/react-slot"
import {
  Controller,
  ControllerProps,
  FieldPath,
  FieldValues,
  FormProvider,
  useFormContext,
} from "react-hook-form"

import { cn } from "@/lib/utils"
import { Label } from "@/components/ui/label"

const Form = FormProvider

type FormFieldContextValue<
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
> = {
  name: TName
}

const FormFieldContext = React.createContext<FormFieldContextValue>(
  {} as FormFieldContextValue
)

const FormField = <
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
>({
  ...props
}: ControllerProps<TFieldValues, TName>) => {
  return (
    <FormFieldContext.Provider value={{ name: props.name }}>
      <Controller {...props} />
    </FormFieldContext.Provider>
  )
}

const useFormField = () => {
  const fieldContext = React.useContext(FormFieldContext)
  const itemContext = React.useContext(FormItemContext)
  const { getFieldState, formState } = useFormContext()

  const fieldState = getFieldState(fieldContext.name, formState)

  if (!fieldContext) {
    throw new Error("useFormField should be used within <FormField>")
  }

  const { id } = itemContext

  return {
    id,
    name: fieldContext.name,
    formItemId: `${id}-form-item`,
    formDescriptionId: `${id}-form-item-description`,
    formMessageId: `${id}-form-item-message`,
    ...fieldState,
  }
}

type FormItemContextValue = {
  id: string
}

const FormItemContext = React.createContext<FormItemContextValue>(
  {} as FormItemContextValue
)

const FormItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const id = React.useId()

  return (
    <FormItemContext.Provider value={{ id }}>
      <div ref={ref} className={cn("space-y-2", className)} {...props} />
    </FormItemContext.Provider>
  )
})
FormItem.displayName = "FormItem"

const FormLabel = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>
>(({ className, ...props }, ref) => {
  const { error, formItemId } = useFormField()

  return (
    <Label
      ref={ref}
      className={cn(error && "text-destructive", className)}
      htmlFor={formItemId}
      {...props}
    />
  )
})
FormLabel.displayName = "FormLabel"

const FormControl = React.forwardRef<
  React.ElementRef<typeof Slot>,
  React.ComponentPropsWithoutRef<typeof Slot>
>(({ ...props }, ref) => {
  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()

  return (
    <Slot
      ref={ref}
      id={formItemId}
      aria-describedby={
        !error
          ? `${formDescriptionId}`
          : `${formDescriptionId} ${formMessageId}`
      }
      aria-invalid={!!error}
      {...props}
    />
  )
})
FormControl.displayName = "FormControl"

const FormDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => {
  const { formDescriptionId } = useFormField()

  return (
    <p
      ref={ref}
      id={formDescriptionId}
      className={cn("text-sm text-muted-foreground", className)}
      {...props}
    />
  )
})
FormDescription.displayName = "FormDescription"

const FormMessage = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, children, ...props }, ref) => {
  const { error, formMessageId } = useFormField()
  const body = error ? String(error?.message) : children

  if (!body) {
    return null
  }

  return (
    <p
      ref={ref}
      id={formMessageId}
      className={cn("text-sm font-medium text-destructive", className)}
      {...props}
    >
      {body}
    </p>
  )
})
FormMessage.displayName = "FormMessage"

export {
  useFormField,
  Form,
  FormItem,
  FormLabel,
  FormControl,
  FormDescription,
  FormMessage,
  FormField,
}

==================================================
File: .\src\components\ui\input.tsx
import * as React from "react"

import { cn } from "@/lib/utils"

export interface InputProps
  extends React.InputHTMLAttributes<HTMLInputElement> {}

const Input = React.forwardRef<HTMLInputElement, InputProps>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Input.displayName = "Input"

export { Input }

==================================================
File: .\src\components\ui\label.tsx
"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const labelVariants = cva(
  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
)

const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &
    VariantProps<typeof labelVariants>
>(({ className, ...props }, ref) => (
  <LabelPrimitive.Root
    ref={ref}
    className={cn(labelVariants(), className)}
    {...props}
  />
))
Label.displayName = LabelPrimitive.Root.displayName

export { Label }

==================================================
File: .\src\components\ui\navigation-menu.tsx
import * as React from "react"
import * as NavigationMenuPrimitive from "@radix-ui/react-navigation-menu"
import { cva } from "class-variance-authority"
import { ChevronDown } from "lucide-react"

import { cn } from "@/lib/utils"

const NavigationMenu = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Root
    ref={ref}
    className={cn(
      "relative z-10 flex max-w-max flex-1 items-center justify-center",
      className
    )}
    {...props}
  >
    {children}
    <NavigationMenuViewport />
  </NavigationMenuPrimitive.Root>
))
NavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName

const NavigationMenuList = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.List
    ref={ref}
    className={cn(
      "group flex flex-1 list-none items-center justify-center space-x-1",
      className
    )}
    {...props}
  />
))
NavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName

const NavigationMenuItem = NavigationMenuPrimitive.Item

const navigationMenuTriggerStyle = cva(
  "group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/50 data-[state=open]:bg-accent/50"
)

const NavigationMenuTrigger = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Trigger
    ref={ref}
    className={cn(navigationMenuTriggerStyle(), "group", className)}
    {...props}
  >
    {children}{" "}
    <ChevronDown
      className="relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180"
      aria-hidden="true"
    />
  </NavigationMenuPrimitive.Trigger>
))
NavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName

const NavigationMenuContent = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Content
    ref={ref}
    className={cn(
      "left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto ",
      className
    )}
    {...props}
  />
))
NavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName

const NavigationMenuLink = NavigationMenuPrimitive.Link

const NavigationMenuViewport = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>
>(({ className, ...props }, ref) => (
  <div className={cn("absolute left-0 top-full flex justify-center")}>
    <NavigationMenuPrimitive.Viewport
      className={cn(
        "origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]",
        className
      )}
      ref={ref}
      {...props}
    />
  </div>
))
NavigationMenuViewport.displayName =
  NavigationMenuPrimitive.Viewport.displayName

const NavigationMenuIndicator = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Indicator
    ref={ref}
    className={cn(
      "top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in",
      className
    )}
    {...props}
  >
    <div className="relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md" />
  </NavigationMenuPrimitive.Indicator>
))
NavigationMenuIndicator.displayName =
  NavigationMenuPrimitive.Indicator.displayName

export {
  navigationMenuTriggerStyle,
  NavigationMenu,
  NavigationMenuList,
  NavigationMenuItem,
  NavigationMenuContent,
  NavigationMenuTrigger,
  NavigationMenuLink,
  NavigationMenuIndicator,
  NavigationMenuViewport,
}

==================================================
File: .\src\components\ui\pagination.tsx
import * as React from "react"
import { ChevronLeft, ChevronRight, MoreHorizontal } from "lucide-react"

import { cn } from "@/lib/utils"
import { ButtonProps, buttonVariants } from "@/components/ui/button"

const Pagination = ({ className, ...props }: React.ComponentProps<"nav">) => (
  <nav
    role="navigation"
    aria-label="pagination"
    className={cn("mx-auto flex w-full justify-center", className)}
    {...props}
  />
)
Pagination.displayName = "Pagination"

const PaginationContent = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    className={cn("flex flex-row items-center gap-1", className)}
    {...props}
  />
))
PaginationContent.displayName = "PaginationContent"

const PaginationItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ className, ...props }, ref) => (
  <li ref={ref} className={cn("", className)} {...props} />
))
PaginationItem.displayName = "PaginationItem"

type PaginationLinkProps = {
  isActive?: boolean
} & Pick<ButtonProps, "size"> &
  React.ComponentProps<"a">

const PaginationLink = ({
  className,
  isActive,
  size = "icon",
  ...props
}: PaginationLinkProps) => (
  <a
    aria-current={isActive ? "page" : undefined}
    className={cn(
      buttonVariants({
        variant: isActive ? "outline" : "ghost",
        size,
      }),
      className
    )}
    {...props}
  />
)
PaginationLink.displayName = "PaginationLink"

const PaginationPrevious = ({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) => (
  <PaginationLink
    aria-label="Go to previous page"
    size="default"
    className={cn("gap-1 pl-2.5", className)}
    {...props}
  >
    <ChevronLeft className="h-4 w-4" />
    <span>Пред.</span>
  </PaginationLink>
)
PaginationPrevious.displayName = "PaginationPrevious"

const PaginationNext = ({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) => (
  <PaginationLink
    aria-label="Go to next page"
    size="default"
    className={cn("gap-1 pr-2.5", className)}
    {...props}
  >
    <span>След.</span>
    <ChevronRight className="h-4 w-4" />
  </PaginationLink>
)
PaginationNext.displayName = "PaginationNext"

const PaginationEllipsis = ({
  className,
  ...props
}: React.ComponentProps<"span">) => (
  <span
    aria-hidden
    className={cn("flex h-9 w-9 items-center justify-center", className)}
    {...props}
  >
    <MoreHorizontal className="h-4 w-4" />
    <span className="sr-only">More pages</span>
  </span>
)
PaginationEllipsis.displayName = "PaginationEllipsis"

export {
  Pagination,
  PaginationContent,
  PaginationEllipsis,
  PaginationItem,
  PaginationLink,
  PaginationNext,
  PaginationPrevious,
}

==================================================
File: .\src\components\ui\select.tsx
"use client"

import * as React from "react"
import * as SelectPrimitive from "@radix-ui/react-select"
import { Check, ChevronDown, ChevronUp } from "lucide-react"

import { cn } from "@/lib/utils"

const Select = SelectPrimitive.Root

const SelectGroup = SelectPrimitive.Group

const SelectValue = SelectPrimitive.Value

const SelectTrigger = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1",
      className
    )}
    {...props}
  >
    {children}
    <SelectPrimitive.Icon asChild>
      <ChevronDown className="h-4 w-4 opacity-50" />
    </SelectPrimitive.Icon>
  </SelectPrimitive.Trigger>
))
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName

const SelectScrollUpButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollUpButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronUp className="h-4 w-4" />
  </SelectPrimitive.ScrollUpButton>
))
SelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName

const SelectScrollDownButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollDownButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronDown className="h-4 w-4" />
  </SelectPrimitive.ScrollDownButton>
))
SelectScrollDownButton.displayName =
  SelectPrimitive.ScrollDownButton.displayName

const SelectContent = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>
>(({ className, children, position = "popper", ...props }, ref) => (
  <SelectPrimitive.Portal>
    <SelectPrimitive.Content
      ref={ref}
      className={cn(
        "relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        position === "popper" &&
          "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
        className
      )}
      position={position}
      {...props}
    >
      <SelectScrollUpButton />
      <SelectPrimitive.Viewport
        className={cn(
          "p-1",
          position === "popper" &&
            "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]"
        )}
      >
        {children}
      </SelectPrimitive.Viewport>
      <SelectScrollDownButton />
    </SelectPrimitive.Content>
  </SelectPrimitive.Portal>
))
SelectContent.displayName = SelectPrimitive.Content.displayName

const SelectLabel = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Label
    ref={ref}
    className={cn("py-1.5 pl-8 pr-2 text-sm font-semibold", className)}
    {...props}
  />
))
SelectLabel.displayName = SelectPrimitive.Label.displayName

const SelectItem = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <SelectPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </SelectPrimitive.ItemIndicator>
    </span>

    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
  </SelectPrimitive.Item>
))
SelectItem.displayName = SelectPrimitive.Item.displayName

const SelectSeparator = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
SelectSeparator.displayName = SelectPrimitive.Separator.displayName

export {
  Select,
  SelectGroup,
  SelectValue,
  SelectTrigger,
  SelectContent,
  SelectLabel,
  SelectItem,
  SelectSeparator,
  SelectScrollUpButton,
  SelectScrollDownButton,
}

==================================================
File: .\src\components\ui\separator.tsx
"use client"

import * as React from "react"
import * as SeparatorPrimitive from "@radix-ui/react-separator"

import { cn } from "@/lib/utils"

const Separator = React.forwardRef<
  React.ElementRef<typeof SeparatorPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>
>(
  (
    { className, orientation = "horizontal", decorative = true, ...props },
    ref
  ) => (
    <SeparatorPrimitive.Root
      ref={ref}
      decorative={decorative}
      orientation={orientation}
      className={cn(
        "shrink-0 bg-border",
        orientation === "horizontal" ? "h-[1px] w-full" : "h-full w-[1px]",
        className
      )}
      {...props}
    />
  )
)
Separator.displayName = SeparatorPrimitive.Root.displayName

export { Separator }

==================================================
File: .\src\components\ui\skeleton.tsx
import { cn } from "@/lib/utils"

function Skeleton({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) {
  return (
    <div
      className={cn("animate-pulse rounded-md bg-muted", className)}
      {...props}
    />
  )
}

export { Skeleton }

==================================================
File: .\src\components\ui\sonner.tsx
"use client"

import { useTheme } from "next-themes"
import { Toaster as Sonner } from "sonner"

type ToasterProps = React.ComponentProps<typeof Sonner>

const Toaster = ({ ...props }: ToasterProps) => {
  const { theme = "system" } = useTheme()

  return (
    <Sonner
      theme={theme as ToasterProps["theme"]}
      className="toaster group"
      toastOptions={{
        classNames: {
          toast:
            "group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg",
          description: "group-[.toast]:text-muted-foreground",
          actionButton:
            "group-[.toast]:bg-primary group-[.toast]:text-primary-foreground",
          cancelButton:
            "group-[.toast]:bg-muted group-[.toast]:text-muted-foreground",
        },
      }}
      {...props}
    />
  )
}

export { Toaster }

==================================================
File: .\src\components\ui\table.tsx
import * as React from "react"

import { cn } from "@/lib/utils"

const Table = React.forwardRef<
  HTMLTableElement,
  React.HTMLAttributes<HTMLTableElement>
>(({ className, ...props }, ref) => (
  <div className="relative w-full overflow-auto">
    <table
      ref={ref}
      className={cn("w-full caption-bottom text-sm", className)}
      {...props}
    />
  </div>
))
Table.displayName = "Table"

const TableHeader = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <thead ref={ref} className={cn("[&_tr]:border-b", className)} {...props} />
))
TableHeader.displayName = "TableHeader"

const TableBody = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tbody
    ref={ref}
    className={cn("[&_tr:last-child]:border-0", className)}
    {...props}
  />
))
TableBody.displayName = "TableBody"

const TableFooter = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tfoot
    ref={ref}
    className={cn(
      "border-t bg-muted/50 font-medium [&>tr]:last:border-b-0",
      className
    )}
    {...props}
  />
))
TableFooter.displayName = "TableFooter"

const TableRow = React.forwardRef<
  HTMLTableRowElement,
  React.HTMLAttributes<HTMLTableRowElement>
>(({ className, ...props }, ref) => (
  <tr
    ref={ref}
    className={cn(
      "border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted",
      className
    )}
    {...props}
  />
))
TableRow.displayName = "TableRow"

const TableHead = React.forwardRef<
  HTMLTableCellElement,
  React.ThHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <th
    ref={ref}
    className={cn(
      "h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0",
      className
    )}
    {...props}
  />
))
TableHead.displayName = "TableHead"

const TableCell = React.forwardRef<
  HTMLTableCellElement,
  React.TdHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <td
    ref={ref}
    className={cn("p-4 align-middle [&:has([role=checkbox])]:pr-0", className)}
    {...props}
  />
))
TableCell.displayName = "TableCell"

const TableCaption = React.forwardRef<
  HTMLTableCaptionElement,
  React.HTMLAttributes<HTMLTableCaptionElement>
>(({ className, ...props }, ref) => (
  <caption
    ref={ref}
    className={cn("mt-4 text-sm text-muted-foreground", className)}
    {...props}
  />
))
TableCaption.displayName = "TableCaption"

export {
  Table,
  TableHeader,
  TableBody,
  TableFooter,
  TableHead,
  TableRow,
  TableCell,
  TableCaption,
}

==================================================
File: .\src\config\globals.ts
export let isAuthorized: boolean = true;

export const db = {
  login: "",
  password: "",
  role: "",
  port: 5433,
  name: "kashtan",
};

export const setIsAuthorized = (value: boolean) => {
  isAuthorized = value;
};

==================================================
File: .\src\hooks\use-agencies-by-id.ts
"use client";

import { useQuery } from "@tanstack/react-query";
import { useQueryClient } from "@tanstack/react-query";
import { useEffect } from "react";
import axios from "axios";

export function useAgenciesById(id: string) {
  const queryClient = useQueryClient();

  const { data } = useQuery({
    queryKey: ["agencies"],
    queryFn: () => axios.get(`/api/agencies/${id}`),
    select: (data) => data.data,
  });

  useEffect(() => {
    queryClient.invalidateQueries({ queryKey: ["agencies"] });
  }, []);

  return {
    agency: data?.agency
  };
}

==================================================
File: .\src\hooks\use-agencies-stats.ts
"use client";

import { useQuery } from "@tanstack/react-query";
import { useQueryClient } from "@tanstack/react-query";
import { useEffect } from "react";
import axios from "axios";

export function useAgenciesStats() {
  const queryClient = useQueryClient();

  const { data } = useQuery({
    queryKey: ["agencies-stats"],
    queryFn: () => axios.get(`/api/agencies/query`),
    select: (data) => data.data,
  });

  useEffect(() => {
    queryClient.invalidateQueries({ queryKey: ["agencies-stats"] });
  }, []);
  return {
    result: data?.result,
  };
}

==================================================
File: .\src\hooks\use-agencies.ts
"use client";

import { useQuery } from "@tanstack/react-query";
import { useQueryClient } from "@tanstack/react-query";
import { useEffect } from "react";
import axios from "axios";

export function useAgencies(pageIndex: number, name: string) {
  const queryClient = useQueryClient();

  const { data } = useQuery({
    queryKey: ["agencies"],
    queryFn: () => axios.get(`/api/agencies?index=${pageIndex}&name=${name}`),
    select: (data) => data.data,
  });

  useEffect(() => {
    queryClient.invalidateQueries({ queryKey: ["agencies"] });
  }, [pageIndex, name]);

  const totalPages = data ? Math.ceil(data.total / 20) : 0;

  return {
    agencies: data?.agencies,
    total: data?.total,
    isFirstPage: pageIndex === 0,
    isLastPage: totalPages > 0 && pageIndex === totalPages - 1,
  };
}

==================================================
File: .\src\hooks\use-agency-products.ts
"use client";

import { useQuery } from "@tanstack/react-query";
import { useQueryClient } from "@tanstack/react-query";
import { useEffect } from "react";
import axios from "axios";

export function useAgencyProducts(pageIndex: number, name: string) {
  const queryClient = useQueryClient();

  const { data } = useQuery({
    queryKey: ["agency-products"],
    queryFn: () => axios.get(`/api/agency-products?index=${pageIndex}&name=${name}`),
    select: (data) => data.data,
  });

  useEffect(() => {
    queryClient.invalidateQueries({ queryKey: ["agency-products"] });
  }, [pageIndex, name]);

  const totalPages = data ? Math.ceil(data.total / 20) : 0;

  return {
    agencyProducts: data?.agencyProducts,
    total: data?.total,
    isFirstPage: pageIndex === 0,
    isLastPage: totalPages > 0 && pageIndex === totalPages - 1,
  };
}

==================================================
File: .\src\hooks\use-cities-stats.ts
"use client";

import { useQuery } from "@tanstack/react-query";
import { useQueryClient } from "@tanstack/react-query";
import { useEffect } from "react";
import axios from "axios";

export function useCitiesStats(amount: number) {
  const queryClient = useQueryClient();

  const { data } = useQuery({
    queryKey: ["cities-stats"],
    queryFn: () => axios.get(`/api/cities/query?amount=${amount}`),
    select: (data) => data.data,
  });

  useEffect(() => {
    queryClient.invalidateQueries({ queryKey: ["cities-stats"] });
  }, [amount]);
  return {
    result: data?.result,
  };
}

==================================================
File: .\src\hooks\use-cities.ts
"use client";

import { useQuery } from "@tanstack/react-query";
import { useQueryClient } from "@tanstack/react-query";
import axios from "axios";
import { useEffect } from "react";

export function useCities(pageIndex: number, name: string) {
  const queryClient = useQueryClient();

  const { data, isLoading, isSuccess, isError } = useQuery({
    queryKey: ["cities"],
    queryFn: () => axios.get(`/api/cities?index=${pageIndex}&name=${name}`),
    select: (data) => data.data,
  });

  useEffect(() => {
    queryClient.invalidateQueries({ queryKey: ["cities"] });
  }, [pageIndex, name]);

  const totalPages = data ? Math.ceil(data.total / 20) : 0;

  return {
    cities: data?.cities,
    total: data?.total,
    isFirstPage: pageIndex === 0,
    isLastPage: totalPages > 0 && pageIndex === totalPages - 1,
  };
}

==================================================
File: .\src\hooks\use-clients-by-id.ts
"use client";

import { useQuery } from "@tanstack/react-query";
import { useQueryClient } from "@tanstack/react-query";
import { useEffect } from "react";
import axios from "axios";

export function useClientsById(id: string) {
  const queryClient = useQueryClient();

  const { data } = useQuery({
    queryKey: ["client"],
    queryFn: () => axios.get(`/api/clients/${id}`),
    select: (data) => data.data,
  });

  useEffect(() => {
    queryClient.invalidateQueries({ queryKey: ["client"] });
  }, []);

  return {
    client: data?.client
  };
}

==================================================
File: .\src\hooks\use-clients-stats.ts
"use client";

import { useQuery } from "@tanstack/react-query";
import { useQueryClient } from "@tanstack/react-query";
import { useEffect } from "react";
import axios from "axios";

export function useClientsStats() {
  const queryClient = useQueryClient();

  const { data } = useQuery({
    queryKey: ["clients-stats"],
    queryFn: () => axios.get(`/api/clients/query`),
    select: (data) => data.data,
  });

  useEffect(() => {
    queryClient.invalidateQueries({ queryKey: ["clients-stats"] });
  }, []);
  return {
    result: data?.result,
  };
}

==================================================
File: .\src\hooks\use-clients.ts
"use client";

import { useQuery } from "@tanstack/react-query";
import { useQueryClient } from "@tanstack/react-query";
import { useEffect } from "react";
import axios from "axios";

export function useClients(pageIndex: number, name: string) {
  const queryClient = useQueryClient();

  const { data, isLoading, isSuccess, isError } = useQuery({
    queryKey: ["clients"],
    queryFn: () => axios.get(`/api/clients?index=${pageIndex}&name=${name}`),
    select: (data) => data.data,
  });

  useEffect(() => {
    queryClient.invalidateQueries({ queryKey: ["clients"] });
  }, [pageIndex, name]);

  const totalPages = data ? Math.ceil(data.total / 20) : 0;

  return {
    clients: data?.clients,
    total: data?.total,
    isFirstPage: pageIndex === 0,
    isLastPage: totalPages > 0 && pageIndex === totalPages - 1,
  };
}

==================================================
File: .\src\hooks\use-orders-stats.ts
"use client";

import { useQuery } from "@tanstack/react-query";
import { useQueryClient } from "@tanstack/react-query";
import { useEffect } from "react";
import axios from "axios";

type ClientAmount = {
  name: string;
  amount: number;
};

export function useOrdersStats(amount: number) {
  const queryClient = useQueryClient();

  const { data } = useQuery({
    queryKey: ["orders-stats"],
    queryFn: () => axios.get(`/api/orders/query?amount=${amount}`),
    select: (data) => data.data,
  });

  useEffect(() => {
    queryClient.invalidateQueries({ queryKey: ["orders-stats"] });
  }, [amount]);
  return {
    result: data?.result,
  };
}

==================================================
File: .\src\hooks\use-orders.ts
"use client";

import { useQuery } from "@tanstack/react-query";
import { useQueryClient } from "@tanstack/react-query";
import { useEffect } from "react";
import axios from "axios";

export function useOrders(pageIndex: number, name: string) {
  const queryClient = useQueryClient();

  const { data } = useQuery({
    queryKey: ["orders"],
    queryFn: () => axios.get(`/api/orders?index=${pageIndex}&name=${name}`),
    select: (data) => data.data,
  });

  useEffect(() => {
    queryClient.invalidateQueries({ queryKey: ["orders"] });
  }, [pageIndex, name]);

  const totalPages = data ? Math.ceil(data.total / 20) : 0;

  return {
    orders: data?.orders,
    total: data?.total,
    isFirstPage: pageIndex === 0,
    isLastPage: totalPages > 0 && pageIndex === totalPages - 1,
  };
}

==================================================
File: .\src\hooks\use-payment-forms.ts
"use client";

import { useQuery } from "@tanstack/react-query";
import { useQueryClient } from "@tanstack/react-query";
import axios from "axios";
import { useEffect } from "react";

export function usePaymentForms(pageIndex: number, name: string) {
  const queryClient = useQueryClient();

  const { data, isLoading, isSuccess, isError } = useQuery({
    queryKey: ["payment-forms"],
    queryFn: () => axios.get(`/api/payment-forms?index=${pageIndex}&name=${name}`),
    select: (data) => data.data,
  });

  useEffect(() => {
    queryClient.invalidateQueries({ queryKey: ["payment-forms"] });
  }, [pageIndex, name]);

  const totalPages = data ? Math.ceil(data.total / 20) : 0;

  return {
    paymentForms: data?.paymentForms,
    total: data?.total,
    isFirstPage: pageIndex === 0,
    isLastPage: totalPages > 0 && pageIndex === totalPages - 1,
  };
}

==================================================
File: .\src\hooks\use-products.ts
"use client";

import { useQuery } from "@tanstack/react-query";
import { useQueryClient } from "@tanstack/react-query";
import axios from "axios";
import { useEffect } from "react";

export function useProducts(pageIndex: number, name: string) {
  const queryClient = useQueryClient();

  const { data } = useQuery({
    queryKey: ["products"],
    queryFn: () => axios.get(`/api/products?index=${pageIndex}&name=${name}`),
    select: (data) => data.data,
  });

  useEffect(() => {
    queryClient.invalidateQueries({ queryKey: ["products"] });
  }, [pageIndex, name]);

  const totalPages = data ? Math.ceil(data.total / 20) : 0;

  return {
    products: data?.products,
    total: data?.total,
    isFirstPage: pageIndex === 0,
    isLastPage: totalPages > 0 && pageIndex === totalPages - 1,
  };
}

==================================================
File: .\src\hooks\use-property-types.ts
"use client";

import { useQuery } from "@tanstack/react-query";
import { useQueryClient } from "@tanstack/react-query";
import axios from "axios";
import { useEffect } from "react";

export function usePropertyTypes(pageIndex: number, name: string) {
  const queryClient = useQueryClient();

  const { data } = useQuery({
    queryKey: ["property-types"],
    queryFn: () => axios.get(`/api/property-types?index=${pageIndex}&name=${name}`),
    select: (data) => data.data,
  });

  useEffect(() => {
    queryClient.invalidateQueries({ queryKey: ["property-types"] });
  }, [pageIndex, name]);

  const totalPages = data ? Math.ceil(data.total / 20) : 0;

  return {
    propertyTypes: data?.propertyTypes,
    total: data?.total,
    isFirstPage: pageIndex === 0,
    isLastPage: totalPages > 0 && pageIndex === totalPages - 1,
  };
}

==================================================
File: .\src\hooks\use-users.ts
"use client";

import { useQuery } from "@tanstack/react-query";
import { useQueryClient } from "@tanstack/react-query";
import { useEffect } from "react";
import axios from "axios";

export function useUsers(pageIndex: number, name: string) {
  const queryClient = useQueryClient();

  const { data } = useQuery({
    queryKey: ["users"],
    queryFn: () => axios.get(`/api/users?index=${pageIndex}&name=${name}`),
    select: (data) => data.data,
  });

  useEffect(() => {
    queryClient.invalidateQueries({ queryKey: ["users"] });
  }, [pageIndex, name]);

  const totalPages = data ? Math.ceil(data.total / 20) : 0;

  return {
    users: data?.users,
    total: data?.total,
    isFirstPage: pageIndex === 0,
    isLastPage: totalPages > 0 && pageIndex === totalPages - 1,
  };
}

==================================================
File: .\src\lib\prisma.ts
import { PrismaClient } from "@prisma/client";
import { db } from "@/config/globals";

export const login = async (login: string, password: string) => {
  return new PrismaClient({
    datasourceUrl: `postgresql://${login}:${password}@localhost:${db.port}/${db.name}?schema=public`,
  });
};

// const prisma = new PrismaClient({
//   datasourceUrl: `postgresql://${db.login}:${db.password}@localhost:${db.port}/${db.name}?schema=public`,
// });

// export default prisma;

==================================================
File: .\src\lib\utils.ts
import { type ClassValue, clsx } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}

==================================================
File: .\src\lib\forms\agency-product.form.ts
import { z } from "zod";

export const agencyProductForm = z.object({
  agencyId: z.string().uuid(),
  productId: z.string().uuid(),
  price: z.coerce.number().gte(1)
});

==================================================
File: .\src\lib\forms\agency.form.ts
import { z } from "zod";

export const agencyForm = z.object({
  name: z.string().min(2, {
    message: "Название должно быть длиной не менее 2 символов",
  }),
  cityId: z.string().uuid(),
  propertyTypeId: z.string().uuid(),
  year: z.coerce.number().min(4, {
    message: "Год должен быть длиной не менее 4 символов",
  }),
  paymentAccount: z.coerce.number().min(7, {
    message: "Номер счета должен быть длиной не менее 7 символов",
  }),
});

==================================================
File: .\src\lib\forms\client.form.ts
import { z } from "zod";

export const createClientForm = z.object({
  name: z.string().min(2, {
    message: "Название должно быть длиной не менее 2 символов",
  }),
  cityId: z.string().uuid(),
  adress: z.string().min(2, {
    message: "Адрес должен быть длиной не менее 2 символов",
  }),
  phone: z.string().min(11, {
    message: "Номер телефона должен быть длиной не менее 11 символов",
  })
});

==================================================
File: .\src\lib\forms\create-order.form.ts
import { z } from "zod";

export const createOrderForm = z.object({
  clientId: z.string().uuid(),
  agencyId: z.string().uuid(),
  agencyProductId: z.string().uuid(),
  paymentFormId: z.string().uuid(),
  amount: z.number(),
});

==================================================
File: .\src\lib\forms\login.form.ts
import { z } from "zod";

export const loginForm = z.object({
  login: z.string().min(2, {
    message: "Логин должен быть длиной не менее 2 символов",
  }),
  password: z.string().min(4, {
    message: "Логин должен быть длиной не менее 4 символов",
  }),
});

==================================================
File: .\src\lib\forms\put-order.form.ts
import { z } from "zod";

export const putOrderForm = z.object({
  clientId: z.string().uuid(),
  productId: z.string().uuid(),
  complete: z.boolean(),
});

==================================================
File: .\src\lib\forms\ref.form.ts
import { z } from "zod";

export const refForm = z.object({
  name: z.string().min(2, {
    message: "Название должно быть длиной не менее 2 символов",
  }),
});

==================================================
File: .\src\lib\forms\user.form.ts
import { z } from "zod";

export const userForm = z.object({
  login: z.string().min(2, {
    message: "Логин должен быть длиной не менее 2 символов",
  }),
  password: z.string().min(4, {
    message: "Логин должен быть длиной не менее 4 символов",
  }),
  role: z.string(),
  agencyId: z.string(),
});

==================================================
File: .\src\models\agency-product.ts
import { Agency } from "./agency";
import { Product } from "./product";

export interface AgencyProduct {
  id: string;
  agency: Agency;
  product: Product;
  price: number;
}

==================================================
File: .\src\models\agency.ts
import { AgencyProduct } from "@prisma/client";
import { City } from "./city";
import { PropertyType } from "./property-type";

export interface Agency {
  id: string;
  name: string;
  city: City;
  property: PropertyType;
  year: number;
  paymentAccount: number;
  agencyProducts: AgencyProduct[];
}

==================================================
File: .\src\models\city.ts
export interface City {
  id: string;
  name: string;
}

==================================================
File: .\src\models\client.ts
import { City } from "@/models/city";
import { Order } from "@/models/order";

export interface Client {
  id: string;
  name: string;
  adress: string;
  phone: string;
  city: City;
  orders: Order[];
}

==================================================
File: .\src\models\order.ts
import { Agency } from "./agency";
import { AgencyProduct } from "./agency-product";
import { Client } from "./client";
import { PaymentForm } from "./payment-form";

export interface Order {
  id: string;
  client: Client;
  agency: Agency;
  agencyProduct: AgencyProduct;
  paymentForm: PaymentForm;
  amount: number;
  created: Date;
  completed: Date;
}

==================================================
File: .\src\models\payment-form.ts
export interface PaymentForm {
    id: string;
    name: string;
}
==================================================
File: .\src\models\product.ts
export interface Product {
    id: string;
    name: string;
    price: number;
}
==================================================
File: .\src\models\property-type.ts
export interface PropertyType {
    id: string;
    name: string;
}
==================================================
File: .\src\models\user.ts
import { Agency } from "./agency";

export interface User {
  id: string;
  login: string;
  role: string;
  password?: string;
  agencies: Agency;
}

==================================================
