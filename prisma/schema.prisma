generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model City {
  id        String        @id @default(uuid())
  name      String        @unique
  agencies  Agency[]
  clients   Client[]

  @@map("cities")
}

model PropertyType {
  id        String        @id @default(uuid())
  name      String        @unique
  agencies  Agency[]
  
  @@map("property_types")
}

model PaymentForm {
  id        String        @id @default(uuid())
  name      String        @unique
  orders    Order[]

  @@map("payment_forms")
}

model Product {
  id              String        @id @default(uuid())
  name            String        @unique
  agencyProducts  AgencyProduct[]

  @@map("products")
}

model AgencyProduct {
  id        String        @id @default(uuid())
  agencyId  String        @map("agency_id")
  productId String        @map("product_id")
  price     Float
  agency    Agency        @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  product   Product       @relation(fields: [productId], references: [id], onDelete: Cascade)
  oreders   Order[]

  @@map("agency_poducts")
}


model Agency {
  id              String          @id @default(uuid())
  name            String          @unique
  cityId          String          @map("city_id")
  propertyTypeId  String          @map("property_type_id") 
  city            City            @relation(fields: [cityId], references: [id], onDelete: Cascade)
  property        PropertyType    @relation(fields: [propertyTypeId], references: [id], onDelete: Cascade)
  year            Int 
  paymentAccount  Int             @map("payment_Account")
  agencyProducts  AgencyProduct[] 
  users           User[]
  orders          Order[]

  @@map("agencies")
}

model Client {
  id        String        @id @default(uuid())
  name      String        @unique
  adress    String        @unique
  phone     String
  cityId    String        @map("city_id")
  city      City          @relation(fields: [cityId], references: [id], onDelete: Cascade)
  orders    Order[]

  @@map("clients")
}

model Order {
  id              String        @id @default(uuid())
  clientId        String        @map("client_id")
  agencyId        String        @map("agency_id")
  agencyProductId String        @map("agency_product_id")
  paymentFormId   String        @map("payment_form_id")
  amount          Int
  created         DateTime
  completed       DateTime?     
  client          Client        @relation(fields: [clientId], references: [id], onDelete: Cascade)
  agency          Agency        @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  agencyProduct   AgencyProduct @relation(fields: [agencyProductId], references: [id], onDelete: Cascade)
  paymentForm     PaymentForm   @relation(fields: [paymentFormId], references: [id], onDelete: Cascade)

  @@map("orders")
}

model User {
  id          String    @id @default(uuid())
  login       String    @unique
  role        String
  agencyId    String    @map("agency_id")
  agencies    Agency  @relation(fields: [agencyId], references: [id])

  @@map("users")
}
